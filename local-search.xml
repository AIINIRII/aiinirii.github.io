<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="/2021/10/25/design-pattern-prototype-pattern/"/>
    <url>/2021/10/25/design-pattern-prototype-pattern/</url>
    
    <content type="html"><![CDATA[<h1 id="01-Prototype-Pattern"><a href="#01-Prototype-Pattern" class="headerlink" title="01 Prototype Pattern"></a>01 Prototype Pattern</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在写代码时，我们也许会碰到这些情景：</p><ol><li>在进行一次数据库查询后，我们成功地创建出了一个实体，而此时，我们需要从同一个数据源以同样方法取得另一个实体，如果已知其他人并未对数据源进行任何写入操作，那么此时最好的办法就是不经过数据源，我们直接复制已经查询到的数据。这样一来就能避免再次占用昂贵的数据库链接资源，并避免高耗时的数据库查询请求。</li><li>或者，在千辛万苦经过了多次递归反射后，我们成功分析了一个类，并得到了它的解析结果对应的对象。这时如果我们需要去使用这个解析对应的对象，最好的办法就是将这个对象作为一个原型，直接复制其中的各个属性，从而跳过极其耗时的 Java 反射过程，快速生成解析结果对象。</li><li>又或者，作为一个程序员，我们在对 Excel 表的其中一个格子进行了各种 style 的装饰，虽然我们很享受这个美化的过程，但是在美化结束后，如果需要我们去对第二个格子，或是另一个 Excel 文件中的另一个相同 style 的格子重新赋值一次，我们会感到相当痛苦。这个时候最好的方法就是去通过之前已经美化完成的格子复制一次，之后只需稍微改一下格子中的文字就好啦。</li></ol><p>因此，Prototype Pattern 就应运而生了，作为创建模式之一，它可以省去创建过程中的一些昂贵的消耗，并以简单无脑的复制（clone）代替。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>下面是它的 UML 图：</p><p><img src="/image/1920px-Prototype_UML.svg.png" alt="Prototype UML"></p><p>它本质上是进行了一次克隆的操作，借用已经有的实体，进行一次克隆，从而创建出一个一模一样的实体。UML 图非常简单，但是平常我们一般不会将其单独使用，而往往作为一种辅助工具，实现快速无误地创建一个新对象的作用。</p><h2 id="关于-Cloneable"><a href="#关于-Cloneable" class="headerlink" title="关于 Cloneable"></a>关于 Cloneable</h2><h3 id="为什么不推荐使用-Cloneable"><a href="#为什么不推荐使用-Cloneable" class="headerlink" title="为什么不推荐使用 Cloneable?"></a>为什么不推荐使用 Cloneable?</h3><p>在真实场景中，我们一般使用 Constructor 代替 Cloneable 实现 Prototype Pattern，在 <code>Effective Java</code> 这本书中，<strong>Josh Bloch</strong> 也提到了这个观点：</p><blockquote><p><em>recommend using a copy constructor instead of implementing <code>Cloneable</code> and writing <code>clone</code></em></p></blockquote><p>我们来看看他的解释：</p><blockquote><p>If you’ve read the item about cloning in my book, especially if you read between the lines, you will know that I think clone is deeply broken. There are a few design flaws, the biggest of which is that the <code>Cloneable</code> interface does not have a <code>clone</code> method. And that means it simply doesn’t work: making something <code>Cloneable</code> doesn’t say anything about what you can do with it. Instead, it says something about what it can do internally. It says that if by calling <code>super.clone</code> repeatedly it ends up calling <code>Object</code>‘s <code>clone</code> method, this method will return a field copy of the original.</p><p>But it doesn’t say anything about what you can do with an object that implements the <code>Cloneable</code> interface, which means that you can’t do a polymorphic <code>clone</code> operation. If I have an array of <code>Cloneable</code>, you would think that I could run down that array and clone every element to make a deep copy of the array, but I can’t. You cannot cast something to <code>Cloneable</code> and call the <code>clone</code> method, because <code>Cloneable</code> doesn’t have a public <code>clone</code> method and neither does <code>Object</code>. If you try to cast to <code>Cloneable</code> and call the <code>clone</code> method, the compiler will say you are trying to call the protected <code>clone</code> method on object.</p><p>The truth of the matter is that you don’t provide any capability to your clients by implementing <code>Cloneable</code> and providing a public <code>clone</code> method other than the ability to copy. This is no better than what you get if you provide a copy operation with a different name and you don’t implement <code>Cloneable</code>. That’s basically what you’re doing with a copy constructor. The copy constructor approach has several advantages, which I discuss in the book. One big advantage is that the copy can be made to have a different representation from the original. For example, you can copy a <code>LinkedList</code> into an <code>ArrayList</code>.</p><p><code>Object</code>‘s <code>clone</code> method is very tricky. It’s based on field copies, and it’s “extra-linguistic.” It creates an object without calling a constructor. There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and outside Sun, stemming from the fact that if you just call <code>super.clone</code> repeatedly up the chain until you have cloned an object, you have a shallow copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don’t have two independent objects. If you modify one, the other changes as well. And all of a sudden, you get random behavior.</p><p>There are very few things for which I use <code>Cloneable</code> anymore. I often provide a public <code>clone</code> method on concrete classes because people expect it. I don’t have abstract classes implement <code>Cloneable</code>, nor do I have interfaces extend it, because I won’t place the burden of implementing <code>Cloneable</code> on all the classes that extend (or implement) the abstract class (or interface). It’s a real burden, with few benefits.</p><p>Doug Lea goes even further. He told me that he doesn’t use <code>clone</code> anymore except to copy arrays. You should use <code>clone</code> to copy arrays, because that’s generally the fastest way to do it. But Doug’s types simply don’t implement <code>Cloneable</code> anymore. He’s given up on it. And I think that’s not unreasonable.</p><p>It’s a shame that <code>Cloneable</code> is broken, but it happens. The original Java APIs were done very quickly under a tight deadline to meet a closing market window. The original Java team did an incredible job, but not all of the APIs are perfect. <code>Cloneable</code> is a weak spot, and I think people should be aware of its limitations.</p><p>来源：<a href="https://www.artima.com/articles/josh-bloch-on-design#:~:text=Copy%20Constructor%20versus%20Cloning">https://www.artima.com/articles/josh-bloch-on-design#:~:text=Copy%20Constructor%20versus%20Cloning</a></p></blockquote><p>总的来说，<code>Cloneable/clone</code> 存在以下几个致命的缺点：</p><ul><li>继承 <code>Cloneable</code> 接口后，不会强制实现 <code>clone</code> 方法。而这样一来，这个类他并不能告诉你它继承了这个接口之后可以做些什么，相反，他要求你拥有 <code>Cloneable</code> 接口的知识背景，让你自己领悟到，原来继承了 <code>Cloneable</code> 接口之后，就能调用 <code>clone</code> 方法去实现对象的拷贝。</li><li>另外，在一些深克隆场景中，<code>clone</code> 方法也会引起一些疑惑。例如在一个实现了 <code>Cloneable</code> 的数组中，你其实是期待它能够使用 <code>clone</code> 方法去进行深克隆的，但是事实上，由于 <code>clone</code> 是个 <code>protected</code> 的方法，你是无法去将其中的每个对象都转换成 <code>Cloneable</code>，并对其实施 <code>clone</code> 方法的。因此，这种需要深克隆的场景里，也许使用 <code>constructor</code> 来进行拷贝会更靠谱。</li><li>除此之外，使用 <code>Cloneable</code> 方法还会有一个问题，那就是它带来了隐藏的风险成本——如果使用者弄混了浅克隆和深克隆的话，这样的实现方式极其容易产生 bug。这个也是阿里 Java 手册推荐慎用 <code>Object</code> 的 <code>clone</code> 方法来实现对象的克隆的一个主要原因。</li></ul><h3 id="在-Java-中的其他替代实现方式"><a href="#在-Java-中的其他替代实现方式" class="headerlink" title="在 Java 中的其他替代实现方式"></a>在 Java 中的其他替代实现方式</h3><ul><li>对于数组，可以使用 <code>System.array.copy</code> 来实现操作系统层面的数组快速拷贝。</li><li>对于对象，为了防止上面所说的三个缺点所可能引发的风险问题，我们还是使用 <code>constructor</code> 吧。</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>在 Spring Boot 中，我们有一个类叫做 BeanDefinition，这个类所对应的对象，都和 Bean 的创建有关，可以说是一个非常核心的类了。例如：</p><ul><li><p>在 Spring 的核心方法 org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean 中，当我们需要去新创建一个 Bean 对象供程序使用的时候，我们首先需要解析 class，生成对应的 BeanDefinition 对象 mbd (RootBeanDefinition) 。</p><blockquote><p>对于那些不了解 mdb 的小伙伴们：mdb 是一个 BeanDefinition 对象，其中包含了许多在配置时期所需要指定的该 Bean 的属性 - 例如 isPrototype, isSingleton, resolvedTargetType 等等等等。</p><p>而 mdb 将会参加下面这个重要的流水线：</p><p>我们通过 xml 文件或者 Java annotation 去设置这个 Bean 的一些特性，比如它对应的 class，它是否是单例。之后我们会创建一个 MutablePropertyValues 对象，将之前的配置变成一个 key-value 的 map。而这个 map 中，key 是 Bean Definition 中的属性的 Java 字段名称，value 是我们所指定的值。再成功生成 MutablePropertyValues 之后，我们通过 new RootBeanDefinition(className, null, mutablePropertyValues) 的方式生成 beanDefinition，并将它注入到ApplicationContext 里。这样一来，下次需要 Bean 的时候，我们就只需要去执行 applicationContext.getBean(className) 就可以让 beanFactory 这个工厂根据 beanDefinition 的定义来生成对应的 bean Object 了。</p><pre><code class=" mermaid">flowchart LR1(xml/Java annotation) --&gt;|文件解析和赋值| 2(MutablePropertyValues - a map)2 --&gt;|构造 BeanDefinition 实例| 3(beanDefinition)3 --&gt;|注入容器| 4(application context)4 --&gt;|getBean| 5(bean Object)</code></pre></blockquote><p>在这之中，由于 xml/Java annotation 解析涉及到相当耗时的文件解析和 Java 反射过程，且在后面的 MutablePropertyValues -&gt; beanDefinition 的过程中也需要使用 Java 反射技术去对 beanDefinition 进行赋值操作。因此在 beanDefinition 生成之前的耗时是非常可观的。聪明的你可能发现了，这是可以避免的，因为我们的配置文件并不会改变。当然 Spring 也不笨，在它的源码中，对于每个类，它只会生成一次 beanDefinition 对象，在那之后，它都会使用 org.springframework.beans.factory.support.RootBeanDefinition#RootBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition) 这个方法将 RootBeanDefinition 复制一遍，进行使用。</p><p>有人可能就问了，这个是一个 constructor 方法呀，我们讲的 Prototype Pattern 不应该是使用 clone 来实现的吗？别急，请你仔细看看这个方法的实现，它其实就是干了 clone 这件事情：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RootBeanDefinition</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractBeanDefinition</span> </span>&#123;<br>    ...<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RootBeanDefinition</span><span class="hljs-params">(RootBeanDefinition original)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(original);<br><span class="hljs-keyword">this</span>.decoratedDefinition = original.decoratedDefinition;<br><span class="hljs-keyword">this</span>.qualifiedElement = original.qualifiedElement;<br><span class="hljs-keyword">this</span>.allowCaching = original.allowCaching;<br><span class="hljs-keyword">this</span>.isFactoryMethodUnique = original.isFactoryMethodUnique;<br><span class="hljs-keyword">this</span>.targetType = original.targetType;<br><span class="hljs-keyword">this</span>.factoryMethodToIntrospect = original.factoryMethodToIntrospect;<br>&#125;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractBeanDefinition</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BeanMetadataAttributeAccessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanDefinition</span>, <span class="hljs-title">Cloneable</span> </span>&#123;<br>    ...<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">AbstractBeanDefinition</span><span class="hljs-params">(BeanDefinition original)</span> </span>&#123;<br>setParentName(original.getParentName());<br>setBeanClassName(original.getBeanClassName());<br>setScope(original.getScope());<br>setAbstract(original.isAbstract());<br>setFactoryBeanName(original.getFactoryBeanName());<br>setFactoryMethodName(original.getFactoryMethodName());<br>setRole(original.getRole());<br>setSource(original.getSource());<br>copyAttributesFrom(original);<br><br><span class="hljs-keyword">if</span> (original <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;<br>AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original;<br><span class="hljs-keyword">if</span> (originalAbd.hasBeanClass()) &#123;<br>setBeanClass(originalAbd.getBeanClass());<br>&#125;<br><span class="hljs-keyword">if</span> (originalAbd.hasConstructorArgumentValues()) &#123;<br>setConstructorArgumentValues(<span class="hljs-keyword">new</span> ConstructorArgumentValues(original.getConstructorArgumentValues()));<br>&#125;<br><span class="hljs-keyword">if</span> (originalAbd.hasPropertyValues()) &#123;<br>setPropertyValues(<span class="hljs-keyword">new</span> MutablePropertyValues(original.getPropertyValues()));<br>&#125;<br><span class="hljs-keyword">if</span> (originalAbd.hasMethodOverrides()) &#123;<br>setMethodOverrides(<span class="hljs-keyword">new</span> MethodOverrides(originalAbd.getMethodOverrides()));<br>&#125;<br>Boolean lazyInit = originalAbd.getLazyInit();<br><span class="hljs-keyword">if</span> (lazyInit != <span class="hljs-keyword">null</span>) &#123;<br>setLazyInit(lazyInit);<br>&#125;<br>setAutowireMode(originalAbd.getAutowireMode());<br>setDependencyCheck(originalAbd.getDependencyCheck());<br>setDependsOn(originalAbd.getDependsOn());<br>setAutowireCandidate(originalAbd.isAutowireCandidate());<br>setPrimary(originalAbd.isPrimary());<br>copyQualifiersFrom(originalAbd);<br>setInstanceSupplier(originalAbd.getInstanceSupplier());<br>setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed());<br>setLenientConstructorResolution(originalAbd.isLenientConstructorResolution());<br>setInitMethodName(originalAbd.getInitMethodName());<br>setEnforceInitMethod(originalAbd.isEnforceInitMethod());<br>setDestroyMethodName(originalAbd.getDestroyMethodName());<br>setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod());<br>setSynthetic(originalAbd.isSynthetic());<br>setResource(originalAbd.getResource());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>setConstructorArgumentValues(<span class="hljs-keyword">new</span> ConstructorArgumentValues(original.getConstructorArgumentValues()));<br>setPropertyValues(<span class="hljs-keyword">new</span> MutablePropertyValues(original.getPropertyValues()));<br>setLazyInit(original.isLazyInit());<br>setResourceDescription(original.getResourceDescription());<br>&#125;<br>&#125;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可见，这么一来，开销确实小了很多，不需要解析文件，也不需要 Java 反射了。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 致命错误</title>
    <link href="/2021/05/10/mysql-deadly-problem/"/>
    <url>/2021/05/10/mysql-deadly-problem/</url>
    
    <content type="html"><![CDATA[<p>今天遇到了一个MySQL有关的错误，记录一下。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">root@iZ2ze2hwhau036810z3eyrZ:/opt/web<span class="hljs-comment"># systemctl start mysql</span><br>Job <span class="hljs-keyword">for</span> mysql.service failed because the control process exited with error code.<br>See <span class="hljs-string">&quot;systemctl status mysql.service&quot;</span> and <span class="hljs-string">&quot;journalctl -xe&quot;</span> <span class="hljs-keyword">for</span> details.<br>● mysql.service - MySQL Community Server<br>   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)<br>   Active: failed (Result: exit-code) since Mon 2021-05-10 15:58:54 CST; 3min 28s ago<br>  Process: 3330 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)<br>  Process: 3368 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid (code=exited, status=1/F<br><br><br></code></pre></div></td></tr></table></figure><p>后来无论如何重启都无法运行MySQL服务。</p><p>最后转了一圈论坛也没发现自己的问题所在。</p><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">root@iZ2ze2hwhau036810z3eyrZ:~<span class="hljs-comment"># df</span><br>Filesystem     1K-blocks     Used Available Use% Mounted on<br>udev              953472        0    953472   0% /dev<br>tmpfs             193720      484    193236   1% /run<br>/dev/vda1       41152812 41115388         0 100% /<br>tmpfs             968596        0    968596   0% /dev/shm<br>tmpfs               5120        0      5120   0% /run/lock<br>tmpfs             968596        0    968596   0% /sys/fs/cgroup<br>tmpfs             193716        0    193716   0% /run/user/0<br><br></code></pre></div></td></tr></table></figure><p>好吧，原来是硬盘占用的问题。。。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google Android TodoList MVVM 架构分析</title>
    <link href="/2020/08/31/Google-Android-TodoList-MVVM-%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <url>/2020/08/31/Google-Android-TodoList-MVVM-%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>这几天打算写个android程序，但建好项目之后油然而生的无从下手感，让我意识到，作为一名追求程序极致美学的搬砖人民，还是先摸清楚目前主流的android程序结构再下手吧。</p><p>逛了一圈CSDN之后，作为一个小白我了解到，目前市场上比较成熟的两种架构思想分别是MVP和MVVM。斟酌之后，我选择了MVVM架构作为我的第一个android程序的架构。</p><p>于是我顺藤摸瓜，终于发现了，原来android官方早在GitHub上公布了官方对于MVVM这个架构的理解（GitHub传送门：<a href="https://github.com/android/architecture-samples">https://github.com/android/architecture-samples</a>）。</p><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p>我们首先从整体看这个程序的结构（这里不关注Test代码）：</p><p><img src="/image/image-20200831204959627.png" alt="image-20200831204959627"></p><p>可以发现，android官方把整个程序分成了几个部分：</p><ol><li><p>data - 有关数据处理的package</p></li><li><p>util - 各种自定义工具类</p></li><li><p>tasks, taskdetail, statistics, addedittask - 各种以功能划分的包含ViewModel和Activity的package</p></li><li><p>ViewModelFactory - ViewModel工厂</p></li><li><p>ScrollChildSwipeRefreshLayout - 自定义组件</p></li><li><p>SingleLiveEvent - 这个很奇怪，里面全是注释，下面是google对这个类的解释：</p><blockquote><p>Looking for the SingleLiveEvent class? We are now using the Event class.</p></blockquote></li><li><p>Event - 对数据进行事件性封装</p></li></ol><h1 id="Data包分析"><a href="#Data包分析" class="headerlink" title="Data包分析"></a>Data包分析</h1><p>其实其他的都好理解，但data包中的安排需要分析一波：</p><p><img src="/image/image-20200831203339387.png" alt="image-20200831203339387"></p><p>我们可以发现，其实对于一个数据来说，它的生命周期可以根据下面的流程图来进行分析：</p><p><img src="/image/image-20200831212018062.png" alt="image-20200831212018062"></p><p>这么一来，google的官方MVVM架构就分析得差不多了。纸上得来终觉浅，绝知此事要躬行，实践去了（逃</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>透明状态栏实现过程中遇到的问题</title>
    <link href="/2020/08/13/Transparency-state-bar-problem/"/>
    <url>/2020/08/13/Transparency-state-bar-problem/</url>
    
    <content type="html"><![CDATA[<h1 id="问题（解决办法在文章末尾）"><a href="#问题（解决办法在文章末尾）" class="headerlink" title="问题（解决办法在文章末尾）"></a>问题（解决办法在文章末尾）</h1><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- file inner.xml --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/innerLayout&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;530dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:fitsSystemWindows</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- file outer.xml --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ScrollView</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/outerLayout&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:overScrollMode</span>=<span class="hljs-string">&quot;never&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:scrollbars</span>=<span class="hljs-string">&quot;none&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:visibility</span>=<span class="hljs-string">&quot;invisible&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:fitsSystemWindows</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:fitsSystemWindows</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;@layout/inner&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ScrollView</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-comment">// file activity.kt</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Activity</span> : <span class="hljs-type">AppCompatActivity</span></span>() &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        ...<br>        nowLayout.setBackgroundResource(ImageId)<br>        ...<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- file AndroidManifest.xml --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;xyz.aiinirii.xxx&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.xxxApplication&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:allowBackup</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/app_name&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:roundIcon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher_round&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:supportsRtl</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/AppTheme&quot;</span>&gt;</span><br>...<br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.Activity&quot;</span> <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/ActivityTheme&quot;</span>/&gt;</span><br>...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- file styles.xml --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><span class="xml"></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- Customize your theme here. --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimary&quot;</span>&gt;</span>@color/colorPrimary<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/colorPrimaryDark<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ActivityTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;AppTheme&quot;</span>&gt;</span><span class="xml"></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:statusBarColor&quot;</span>&gt;</span>@android:color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>上面放出来的是几个相关的文件，理论上按照上面这样设定，是可以实现状态栏的透明的，但是事实上，在实际操作时是这样的效果：</p><p><img src="/image/image-20200813212736743.png" alt="image-20200813212736743"></p><p>可以看到，上面的状态栏是白色的，暂时还不知道问题出在那里，接下来打算做几个实验。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ol><li>将background改为xml内静态设置，即加入<code>android:background=&quot;@color/colorPrimary&quot;</code>字段，发现并无用。</li><li>猜测是因为需要设置透明框属性的view的<code>android:layout_height=&quot;530dp&quot;</code>被定死出的问题，改为<code>match_parent</code>之后依然无用。</li><li>猜测是因为<code>&lt;include&gt;</code> 标签导致的问题，于是在<code>&lt;include&gt;</code>标签上方加入了一张图片并设置<code>android:fitsSystemWindows=&quot;true&quot;</code>，发现问题依然存在。</li><li>猜测是<code>&lt;ScrollView&gt;</code>标签不支持透明模式，事实上并不是。。。</li></ol><h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p>终于找到问题所在了，在查遍资料之后在这里整理一下：</p><ol><li><p>首先是有关<code>android:fitsSystemWindows</code>这个属性，是我之前理解错了。对于一个组件来说，如果让这个值等于<code>true</code>的话，那么就会避开系统组件，具体避开方式为增加padding，下面靠更改北京市<code>TextView</code>组件的<code>fitsSystemWindows</code>字段来进行试验。</p><ul><li><p><code>fitsSystemWindows = false</code>：</p><p>  <img src="/image/image-20200813231215979.png" alt="image-20200813231215979"></p></li><li><p><code>fitsSystemWindows = true</code></p><p>  <img src="/image/image-20200813231024882.png" alt="image-20200813231024882"></p></li></ul></li><li><p>如果要解决上面的问题，有两个办法：</p><ul><li><p><code>&lt;item name=&quot;android:windowTranslucentNavigation&quot;&gt;true&lt;/item&gt;</code> 这个办法我最喜欢，它的效果图是这样的：</p><p>  <img src="/image/image-20200813230852013.png" alt="image-20200813230852013"></p></li><li><p><code>&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt;</code>这个对应半透明的效果：</p><p>  <img src="/image/image-20200813231024882.png" alt="image-20200813231024882"></p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Kotlin</tag>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes for: IterDet: Iterative Scheme for Object Detection in Crowded Environments</title>
    <link href="/2020/06/24/Notes-for-IterDet-Iterative-Scheme-for-Object-Detection-in-Crowded-Environments/"/>
    <url>/2020/06/24/Notes-for-IterDet-Iterative-Scheme-for-Object-Detection-in-Crowded-Environments/</url>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在这项工作中，我们开发了一种替代的<strong>迭代方案</strong>，其中在每次迭代中都检测到一个新的对象子集。来自先前迭代的检测到的框在接下来的迭代中传递到网络，以确保不会两次检测到同一对象。只需对训练和推理过程进行较小的修改，就可以将这种迭代方案应用于一级和二级对象检测器。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>现代的NMS之类的算法无法处理拥挤的环境，会把拥挤的两个对象看成一个对象。</p><h2 id="所做工作"><a href="#所做工作" class="headerlink" title="所做工作"></a>所做工作</h2><h3 id="对象检测器可以分为两类："><a href="#对象检测器可以分为两类：" class="headerlink" title="对象检测器可以分为两类："></a>对象检测器可以分为两类：</h3><ul><li>两级检测器（R-CNN系列）</li><li>一级检测器 （YOCO）<ul><li>更高的速度，接近两级检测器的精度</li><li>最近Anchor-free的算法出现了</li></ul></li></ul><h3 id="原先的NMS算法的缺陷："><a href="#原先的NMS算法的缺陷：" class="headerlink" title="原先的NMS算法的缺陷："></a>原先的NMS算法的缺陷：</h3><ul><li>选择得分较高的检测的特性，导致了NMS在拥挤环境会出问题</li></ul><h3 id="做出的努力："><a href="#做出的努力：" class="headerlink" title="做出的努力："></a>做出的努力：</h3><ul><li>NMS的聚类问题</li><li>NMS重新定制为积分任务</li><li>Soft-NMS的应用</li><li>Fitness-NMS和Soft-NMS的结合</li><li>自适应NMS</li><li>R2NMS同时预测对象的完整框和可见框</li><li>加循环LSTM层，用于通过Hungarian loss function训练序列生成</li><li>将Jaccard指数估计为检测质量得分的层，以及一个新颖的EM合并单元</li></ul><h3 id="该算法："><a href="#该算法：" class="headerlink" title="该算法："></a>该算法：</h3><p>迭代进行检测：</p><ul><li>第一次先搜索一些比较简单的对象</li><li>之后几次慢慢增加抑制参数并提高精度</li></ul><h2 id="检验算法可行度"><a href="#检验算法可行度" class="headerlink" title="检验算法可行度"></a>检验算法可行度</h2><ul><li>使用AdaptIS Toy V1 and Toy V2数据集</li><li>基于MMDetection框架</li><li>SGD optimizer with momentum 0.9, weight decay parameter 0.0001, and initial learning rate 0.02</li><li>Adam lr = 0.0001</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] D. Rukhovich, K. Sofiiuk, D. Galeev, O. Barinova, and A. Konushin, “IterDet: Iterative Scheme for ObjectDetection in Crowded Environments,” 2020, [Online]. Available: <a href="http://arxiv.org/abs/2005.05708">http://arxiv.org/abs/2005.05708</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>DL</category>
      
      <category>Object Detection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DL</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes for: A Simple Semi-Supervised Learning Framework for Object Detection</title>
    <link href="/2020/06/24/Notes-for-A-Simple-Semi-Supervised-Learning-Framework-for-Object-Detection/"/>
    <url>/2020/06/24/Notes-for-A-Simple-Semi-Supervised-Learning-Framework-for-Object-Detection/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>STAC：</p><ul><li><p>半监督学习（SSL）</p></li><li><p>从未标记的图像中部署高度自信的本地化对象伪标签</p></li><li><p>通过增强数据来增强一致性，从而更新模型</p></li></ul><h2 id="SSL简介"><a href="#SSL简介" class="headerlink" title="SSL简介"></a>SSL简介</h2><ul><li><p>提供了在没有大规模注释数据时使用未标记数据来提高模型性能的方法</p><ul><li>首先为未标记的数据提供人工标签。</li><li>然后使用语义保留的方法用其他的标签来对这个标签进行预测和更新。</li></ul></li><li><p>数据增强</p><ul><li>提高神经网络的鲁棒性</li><li>对SSL的图像分类功能非常强大！</li></ul></li><li><p>在对象检测问题中也需要这种方法，因为标记成本比较昂贵</p></li></ul><h2 id="方法流程"><a href="#方法流程" class="headerlink" title="方法流程"></a>方法流程</h2><ol><li><p>对数据集进行阶段性培训</p><ul><li>使用所有可用的标记数据训练教师模型</li><li>使用标记和未标记的数据训练STAC</li><li>使用高阈值来控制伪标签的质量</li></ul><blockquote><ol><li><p>Train a teacher model on available labeled images. </p></li><li><p>Generate pseudo labels of unlabeled images (i.e., bounding boxes and their class labels) using the trained teacher model.</p></li><li><p>Apply strong data augmentations to unlabeled images, and augment pseudo labels (i.e. bounding boxes) correspondingly when global geometric transformations are applied.</p></li><li><p>Compute unsupervised loss and supervised loss to train a detector.</p></li></ol></blockquote></li><li><p>训练教师模型</p><ul><li><p>基于FASTER RCNN</p></li><li><p>supervised loss function:</p><p><img src="/image/image-20200624231335427.png" alt="image-20200624231335427"></p></li><li><p>unsupervised loss function:</p><p><img src="/image/image-20200624231531750.png" alt="image-20200624231531750"></p></li><li><p>after join two function*:</p><p><img src="/image/image-20200624231555036.png" alt="image-20200624231555036"></p></li><li><p>其中A是应用与未标记图像的强数据增强。</p></li></ul></li><li><p>数据增强</p><ul><li><p>有以下三种增强方式：</p><ol><li>全局色彩变换（C）：使用[7]中的色彩变换操作和每个操作的建议幅度范围。</li><li>全局几何变换（G）：使用[7]中的几何变换操作，即x-y平移，旋转和x-y剪切。</li><li>盒级变换[69]（B）：使用了来自全局几何变换的三个变换操作，但是幅度范围较小。</li></ol></li><li><p>增强方法：</p><p>C -&gt; G/B -&gt; Random Cutout</p></li></ul></li></ol><p><img src="/image/image-20200624232304092.png" alt="image-20200624232304092"></p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><ul><li>基于Faster RCNN和FPN</li><li>使用了ResNet-50</li><li>λu 和 τ 的使用：<ul><li>λu：无监督损失的正则化系数</li><li>τ：置信度阈值</li><li>当λu= 2且τ= 0.9时，STAC的性能最佳</li></ul></li></ul><blockquote><p>虽然STAC使用伪标记可大大提高mAP的使用率，但我们的结果表明，伪标记质量的逐步提高可能不会带来显着的额外收益</p></blockquote><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li><p>投入不足，需要更高级别的标签进行有效培训。</p></li><li><p>嘈杂的伪标签会过度使用！！</p><blockquote><p>While STAC demonstrates an impressive performance gain already without taking confirmation bias [66,1] issue into ac- count, it could be problematic when using a detection framework with a stronger form of hard negative mining [47,29] because noisy pseudo labels can be overly- used. Further investigation in learning with noisy labels, confidence calibration, and uncertainty estimation in the context of object detection are few important topics to further enhance the performance of SSL object detection.</p></blockquote></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] K. Sohn, Z. Zhang, C.-L. Li, H. Zhang, C.-Y. Lee, and T. Pfister, “A Simple Semi-Supervised Learning Framework for Object Detection,” 2020, [Online]. Available: <a href="http://arxiv.org/abs/2005.04757">http://arxiv.org/abs/2005.04757</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>DL</category>
      
      <category>Object Detection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DL</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Postalk</title>
    <link href="/2020/06/17/Postalk/"/>
    <url>/2020/06/17/Postalk/</url>
    
    <content type="html"><![CDATA[<h1 id="Postalk"><a href="#Postalk" class="headerlink" title="Postalk"></a>Postalk</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h2><p>这个项目是一个基于Spring boot, Mybatis, Druid, MySQL技术的web应用，其功能为发帖+聊天。该文章将会记录开发过程以及在过程之中所遇到的问题。</p><h2 id="1-设计部分"><a href="#1-设计部分" class="headerlink" title="1. 设计部分"></a>1. 设计部分</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>为了使开发更为顺利，我首先按照各实体类之间的关系，设计了该ER图。</p><p><img src="/image/egZaYQPko9BK851.png" alt="Postalk_ER"></p><p>User表：</p><table><thead><tr><th>id</th><th>username</th><th>password</th><th>sex</th><th>age</th><th>phone_number</th><th>email</th><th>registration_date</th></tr></thead><tbody><tr><td>序号</td><td>用户名</td><td>密码</td><td>性别（F表示女性，M表示男性）</td><td>年龄</td><td>电话号码</td><td>电子邮箱</td><td>注册时间</td></tr></tbody></table><p>Text表：</p><table><thead><tr><th>id</th><th>uid</th><th>content</th><th>time</th></tr></thead><tbody><tr><td>序号</td><td>用户序号</td><td>文本内容</td><td>发文时间</td></tr></tbody></table><p>Comment表：</p><table><thead><tr><th>tid</th><th>pid</th></tr></thead><tbody><tr><td>对应文本的序号</td><td>对应评价文本的序号</td></tr></tbody></table><p>Post表：</p><table><thead><tr><th>tid</th></tr></thead><tbody><tr><td>对应文本的序号</td></tr></tbody></table><p>Like表：</p><table><thead><tr><th>uid</th><th>tid</th></tr></thead><tbody><tr><td>对应用户的序号</td><td>对应文本的序号</td></tr></tbody></table><p>Friend表：</p><table><thead><tr><th>uid_1</th><th>uid_2</th><th>since_time</th></tr></thead><tbody><tr><td>用户1的序号</td><td>用户2的序号</td><td>从何时开始成为朋友</td></tr></tbody></table><p>Conversation表：</p><table><thead><tr><th>id</th><th>to_user</th><th>from_user</th><th>conversation_id</th><th>time</th><th>content</th><th>read</th></tr></thead><tbody><tr><td>该段对话的序号</td><td>发送人序号</td><td>接收人序号</td><td>相同两人之间的对话集合的序号</td><td>对话时间</td><td>对话内容</td><td>是否已读</td></tr></tbody></table><h3 id="RESTful风格架构设计"><a href="#RESTful风格架构设计" class="headerlink" title="RESTful风格架构设计"></a>RESTful风格架构设计</h3><table><thead><tr><th>功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>用户登录</td><td>/user/login</td><td>GET</td></tr><tr><td>跳转到添加用户界面</td><td>/user/</td><td>GET</td></tr><tr><td>查询用户</td><td>/user/{id}</td><td>GET</td></tr><tr><td>用户注册</td><td>/user/</td><td>POST</td></tr><tr><td>跳转到对应用户的主页</td><td>/user/myPage</td><td>GET</td></tr><tr><td>跳转到添加帖子界面</td><td>/post/</td><td>GET</td></tr><tr><td>添加帖子</td><td>/post/</td><td>POST</td></tr><tr><td>查询所有帖子</td><td>/posts/</td><td>GET</td></tr><tr><td>查询所有该id对应的用户发的帖子</td><td>/post/{id}</td><td>GET</td></tr><tr><td>修改帖子</td><td>/post/</td><td>PUT</td></tr><tr><td>删除帖子</td><td>/post/{id}</td><td>DELETE</td></tr><tr><td>点赞或取消赞</td><td>/like/</td><td>POST</td></tr><tr><td>获得当前登录用户对应的所有朋友名单</td><td>/friends/</td><td>GET</td></tr><tr><td>跳转到朋友搜索界面</td><td>/friend/</td><td>GET</td></tr><tr><td>根据输入条件查找用户</td><td>/friend/search/</td><td>GET</td></tr><tr><td>添加朋友</td><td>/friend/</td><td>POST</td></tr><tr><td>删除朋友</td><td>/friend/{id}</td><td>DELETE</td></tr></tbody></table><h2 id="2-搭建Mybatis-SpringBoot基础框架"><a href="#2-搭建Mybatis-SpringBoot基础框架" class="headerlink" title="2. 搭建Mybatis+SpringBoot基础框架"></a>2. 搭建Mybatis+SpringBoot基础框架</h2><h3 id="配置Druid数据源"><a href="#配置Druid数据源" class="headerlink" title="配置Druid数据源"></a>配置Druid数据源</h3><ol><li><p>首先引入Druid的Maven依赖</p> <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>然后在<code>application.yml</code>中配置Datasource</p> <figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/postalk?useUnicode=true&amp;characterEncoding=utf-8&amp;relaxAutoCommit=true&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>      <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>      <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,slf4j</span><br>      <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">&quot;/*&quot;</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">&quot;/druid/*&quot;</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-number">123456</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="实现各实体类"><a href="#实现各实体类" class="headerlink" title="实现各实体类"></a>实现各实体类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.aiinirii.postalk.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.EqualsAndHashCode;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String phoneNumber;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Date registrationDate;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Text</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> Date time;<br><br>    <span class="hljs-keyword">private</span> User user;<br>&#125;<br><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Text</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Text text;<br>&#125;<br><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Text</span></span>&#123;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-keyword">private</span> Text text;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Friend</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> User user1;<br>    <span class="hljs-keyword">private</span> User user2;<br>    <span class="hljs-keyword">private</span> Data sinceTime;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Conversation</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> User toUser;<br>    <span class="hljs-keyword">private</span> User fromUser;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> conversationId;<br>    <span class="hljs-keyword">private</span> Date time;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> read;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-用户模块"><a href="#3-用户模块" class="headerlink" title="3. 用户模块"></a>3. 用户模块</h2><h3 id="实现User的CURD操作"><a href="#实现User的CURD操作" class="headerlink" title="实现User的CURD操作"></a>实现User的CURD操作</h3><h4 id="Mapper-实现"><a href="#Mapper-实现" class="headerlink" title="Mapper 实现"></a>Mapper 实现</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.aiinirii.postalk.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> xyz.aiinirii.postalk.bean.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AIINIRII</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAllUser</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">findUserById</span><span class="hljs-params">(Integer id)</span></span>;<br><br>    <span class="hljs-meta">@Select(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(Integer id)</span></span>;<br><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-meta">@Insert(&quot;insert into user(username, password, sex, age, phone_number, email, registration_date) values (#&#123;username&#125;, #&#123;password&#125;, #&#123;sex&#125;, #&#123;age&#125;, #&#123;phoneNumber&#125;, #&#123;email&#125;, #&#123;registrationDate&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Insert(&quot;update user set username=#&#123;username&#125;, password=#&#123;password&#125;, sex=#&#123;sex&#125;, age=#&#123;age&#125;, phone_number=#&#123;phoneNumber&#125;, email=#&#123;email&#125;, registration_date=#&#123;registration_date&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="登录注册功能实现"><a href="#登录注册功能实现" class="headerlink" title="登录注册功能实现"></a>登录注册功能实现</h3><h4 id="Controller类代码实现"><a href="#Controller类代码实现" class="headerlink" title="Controller类代码实现"></a>Controller类代码实现</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.aiinirii.postalk.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> xyz.aiinirii.postalk.bean.User;<br><span class="hljs-keyword">import</span> xyz.aiinirii.postalk.service.UserService;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AIINIRII</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    UserService userService = <span class="hljs-keyword">new</span> UserService();<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/user/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">checkUser</span><span class="hljs-params">(User user, ModelAndView modelAndView)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = userService.checkUser(user);<br>        modelAndView.addObject(<span class="hljs-string">&quot;checkResult&quot;</span>, res);<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>) &#123;<br>            modelAndView.setViewName(<span class="hljs-string">&quot;/post/index&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            modelAndView.setViewName(<span class="hljs-string">&quot;/index&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">findUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id, ModelAndView modelAndView)</span> </span>&#123;<br>        User user = userService.findUserById(id);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;user/list&quot;</span>);<br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        users.add(user);<br>        modelAndView.addObject(<span class="hljs-string">&quot;users&quot;</span>, users);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toRegisterPage</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/update&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">registerUser</span><span class="hljs-params">(User user, ModelAndView modelAndView)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> res = userService.registerUser(user);<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// success insert, go to login page</span><br>            modelAndView.setViewName(<span class="hljs-string">&quot;/index&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// the username is used, go back to the register page</span><br>            modelAndView.addObject(<span class="hljs-string">&quot;userR&quot;</span>, user);<br>            modelAndView.setViewName(<span class="hljs-string">&quot;/user/update&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="前端代码实现（首页）"><a href="#前端代码实现（首页）" class="headerlink" title="前端代码实现（首页）"></a>前端代码实现（首页）</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Signin Template for Bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Bootstrap core CSS --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/asserts/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/asserts/css/signin.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user/login&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/asserts/img/bootstrap-solid.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span>&gt;</span>Please sign in<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #b21f2d&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;checkResult == 1&#125;&quot;</span>&gt;</span>wrong password<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #b21f2d&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;checkResult == 2&#125;&quot;</span>&gt;</span>no such user<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox mb-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remember-me&quot;</span>/&gt;</span> Remember me<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-success btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2019-2020<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="前端代码实现（注册界面）"><a href="#前端代码实现（注册界面）" class="headerlink" title="前端代码实现（注册界面）"></a>前端代码实现（注册界面）</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">60%</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Bootstrap core CSS --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/asserts/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;link href=&quot;/asserts/css/signin.css&quot; rel=&quot;stylesheet&quot;&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;needs-validation&quot;</span> <span class="hljs-attr">novalidate</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputUsername&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 col-form-label&quot;</span>&gt;</span>User name*<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10 mb-3&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputUsername&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;userR!=null&#125;?$&#123;userR.username&#125;&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;valid-feedback&quot;</span>&gt;</span><br>                    Looks good!<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;invalid-feedback&quot;</span>&gt;</span><br>                    Please enter a valid username.<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputPassword&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 col-form-label&quot;</span>&gt;</span>Password*<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputPassword&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;valid-feedback&quot;</span>&gt;</span><br>                    Looks good!<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;invalid-feedback&quot;</span>&gt;</span><br>                    Please enter a valid password.<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">legend</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-form-label col-sm-2 pt-0&quot;</span>&gt;</span>Gender*<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gridRadios1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;M&quot;</span>  <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;userR!=null&#125;?$&#123;userR.sex==&#x27;M&#x27;&#125;&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;gridRadios1&quot;</span>&gt;</span><br>                            Male<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gridRadios2&quot;</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;userR!=null&#125;?$&#123;userR.sex==&#x27;F&#x27;&#125;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;F&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;gridRadios2&quot;</span>&gt;</span><br>                            Female<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputAge&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 col-form-label&quot;</span>&gt;</span>Age*<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputAge&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;userR!=null&#125;?$&#123;userR.age&#125;&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;valid-feedback&quot;</span>&gt;</span><br>                    Looks good!<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;invalid-feedback&quot;</span>&gt;</span><br>                    Please enter a valid age.<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputPhoneNumber&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 col-form-label&quot;</span>&gt;</span>Phone number<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phoneNumber&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;userR!=null&#125;?$&#123;userR.phoneNumber&#125;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputPhoneNumber&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;valid-feedback&quot;</span>&gt;</span><br>                    Looks good!<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;invalid-feedback&quot;</span>&gt;</span><br>                    Please enter a valid phone number.<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputEmail&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 col-form-label&quot;</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;userR!=null&#125;?$&#123;userR.email&#125;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputEmail&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;valid-feedback&quot;</span>&gt;</span><br>                    Looks good!<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;invalid-feedback&quot;</span>&gt;</span><br>                    Please enter a valid email.<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// Example starter JavaScript for disabling form submissions if there are invalid fields</span></span><br><span class="javascript">    (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-meta">        &#x27;use strict&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// Fetch all the forms we want to apply custom Bootstrap validation styles to</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> forms = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;needs-validation&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-comment">// Loop over them and prevent submission</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> validation = <span class="hljs-built_in">Array</span>.prototype.filter.call(forms, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">form</span>) </span>&#123;</span><br><span class="javascript">                form.addEventListener(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (form.checkValidity() === <span class="hljs-literal">false</span>) &#123;</span><br><span class="javascript">                        event.preventDefault();</span><br><span class="javascript">                        event.stopPropagation();</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    form.classList.add(<span class="hljs-string">&#x27;was-validated&#x27;</span>);</span><br><span class="javascript">                &#125;, <span class="hljs-literal">false</span>);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;, <span class="hljs-literal">false</span>);</span><br><span class="javascript">    &#125;)();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-帖子模块"><a href="#4-帖子模块" class="headerlink" title="4. 帖子模块"></a>4. 帖子模块</h2><h3 id="基本的增删改查"><a href="#基本的增删改查" class="headerlink" title="基本的增删改查"></a>基本的增删改查</h3><p>先贴上效果图：</p><ul><li><p>主页面：可以看到平台上所有用户的帖子 -  <img src="/image/image-20200620132434280.png" alt="image-20200620132434280"></p></li><li><p>用户主页面：可以看到自己发的所有帖子，而且能够进行修改和删除 - <img src="/image/image-20200620133505658.png" alt="image-20200620133505658"></p></li><li><p>修改界面：这里用户可以编辑内容并提交 - <img src="/image/image-20200620133609830.png" alt="image-20200620133609830"></p></li><li><p>发帖页面：这里可以发帖 - <img src="/image/image-20200620133748133.png" alt="image-20200620133748133"></p></li></ul><p>因为代码太多，这里就不贴出来了，主要说几个遇到的问题：</p><ol><li><p>基于注解的懒加载</p> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from post left join text t on post.tid = t.id where tid = #&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@Results(id = &quot;findPostById&quot;,</span><br><span class="hljs-meta">        value = &#123;</span><br><span class="hljs-meta">                @Result(id = true, column = &quot;tid&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">                @Result(column = &quot;content&quot;, property = &quot;content&quot;),</span><br><span class="hljs-meta">                @Result(column = &quot;time&quot;, property = &quot;time&quot;),</span><br><span class="hljs-meta">                @Result(column = &quot;uid&quot;, property = &quot;user&quot;, </span><br><span class="hljs-meta">                        one = @One(select = &quot;xyz.aiinirii.postalk.mapper.UserMapper.findUserById&quot;, </span><br><span class="hljs-meta">                                   fetchType = FetchType.LAZY))</span><br><span class="hljs-meta">        &#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-function">Post <span class="hljs-title">findPostById</span><span class="hljs-params">(Integer id)</span></span>;<br></code></pre></div></td></tr></table></figure><p> 其中<code>@Result(column = &quot;uid&quot;, property = &quot;user&quot;, one = @One(select = &quot;xyz.aiinirii.postalk.mapper.UserMapper.findUserById&quot;, fetchType = FetchType.LAZY))</code>所实现的效果是根据<code>findUserById</code>这个类，根据提供的<code>uid</code>查询到<code>user</code>对象，并且只有当<code>user</code>被使用了，即调用了<code>getUser()</code>方法后才会执行查询。</p></li><li><p>如何使用HTML发送put、delete请求</p><p> 其中前端代码为：</p> <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/post/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;needs-validation&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;post!=null&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;post.getId()&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;post!=null&#125;&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p> 这里给的是一个发送put请求的例子，其实form表单是不支持发送put请求的，但是我们可以加一个<code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; th:if=&quot;$&#123;post!=null&#125;&quot;/&gt;</code>在form表单中，其中字段名必须为<code>_method</code>而<code>value</code>应该为希望的请求方式。而这种发送请求的方式，则需要服务端进行form表单的解析，而spring则可以做到这一点，但是需要配置，在<code>application.yml</code>文件中：</p> <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">hiddenmethod:</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="点赞功能实现"><a href="#点赞功能实现" class="headerlink" title="点赞功能实现"></a>点赞功能实现</h3><ul><li><p>赞数显示</p><p>  思路：每次加载页面时自动查询赞数，并显示在页面上。</p><p>  相关LikeMapper代码：</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">LikeMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from `like` where tid = #&#123;tid&#125;&quot;)</span><br>    <span class="hljs-meta">@Results(</span><br><span class="hljs-meta">            id = &quot;findLikeByTId&quot;,</span><br><span class="hljs-meta">            value = &#123;</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;tid&quot;, property = &quot;text&quot;, one = @One(select = &quot;xyz.aiinirii.postalk.mapper.TextMapper.findTextById&quot;, fetchType = FetchType.LAZY)),</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;uid&quot;, property = &quot;user&quot;, one = @One(select = &quot;xyz.aiinirii.postalk.mapper.UserMapper.findUserById&quot;, fetchType = FetchType.LAZY))</span><br><span class="hljs-meta">            &#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-function">List&lt;Like&gt; <span class="hljs-title">findLikeByTId</span><span class="hljs-params">(Integer tid)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>  除此之外我们还需将<code>Post</code>和<code>PostMapper</code>进行调整，每次查询<code>Post</code>时使用懒加载的方式（因为其实需要用到<code>Like</code>的情况并不多）去加载<code>Post</code>中的<code>likes</code>。</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Text</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> Date time;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> anonymous = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-comment">// 新加入likes属性</span><br>    <span class="hljs-keyword">private</span> List&lt;Like&gt; likes;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>  下面是<code>PostMapper</code>类，主要改动是在每个查询方法上的<code>@Result</code>内加入了<code>@Result(id = true, column = &quot;tid&quot;, property = &quot;likes&quot;, many = @Many(select = &quot;xyz.aiinirii.postalk.mapper.LikeMapper.findLikeByTId&quot;, fetchType = FetchType.LAZY))</code>。</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PostMapper</span> </span>&#123;<br><span class="hljs-meta">@Select(&quot;select * from post p left join text t on p.tid = t.id where uid = #&#123;id&#125; ORDER BY t.time DESC&quot;)</span><br>    <span class="hljs-meta">@Results(id = &quot;findAllPostByUId&quot;,</span><br><span class="hljs-meta">            value = &#123;</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;tid&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;content&quot;, property = &quot;content&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;time&quot;, property = &quot;time&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;uid&quot;, property = &quot;user&quot;, one = @One(select = &quot;xyz.aiinirii.postalk.mapper.UserMapper.findUserById&quot;, fetchType = FetchType.LAZY)),</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;tid&quot;, property = &quot;likes&quot;, many = @Many(select = &quot;xyz.aiinirii.postalk.mapper.LikeMapper.findLikeByTId&quot;, fetchType = FetchType.LAZY))</span><br><span class="hljs-meta">            &#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-function">List&lt;Post&gt; <span class="hljs-title">findAllPostByUId</span><span class="hljs-params">(Integer id)</span></span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from post left join text t on post.tid = t.id where tid = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@Results(id = &quot;findPostById&quot;,</span><br><span class="hljs-meta">            value = &#123;</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;tid&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;content&quot;, property = &quot;content&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;time&quot;, property = &quot;time&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;uid&quot;, property = &quot;user&quot;, one = @One(select = &quot;xyz.aiinirii.postalk.mapper.UserMapper.findUserById&quot;, fetchType = FetchType.LAZY)),</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;tid&quot;, property = &quot;likes&quot;, many = @Many(select = &quot;xyz.aiinirii.postalk.mapper.LikeMapper.findLikeByTId&quot;, fetchType = FetchType.LAZY))</span><br><span class="hljs-meta">            &#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-function">Post <span class="hljs-title">findPostById</span><span class="hljs-params">(Integer id)</span></span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from post p left join text t on p.tid = t.id ORDER BY t.time DESC&quot;)</span><br>    <span class="hljs-meta">@Results(id = &quot;findAllPost&quot;,</span><br><span class="hljs-meta">            value = &#123;</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;tid&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;content&quot;, property = &quot;content&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;time&quot;, property = &quot;time&quot;),</span><br><span class="hljs-meta">                    @Result(column = &quot;uid&quot;, property = &quot;user&quot;, one = @One(select = &quot;xyz.aiinirii.postalk.mapper.UserMapper.findUserById&quot;, fetchType = FetchType.LAZY)),</span><br><span class="hljs-meta">                    @Result(id = true, column = &quot;tid&quot;, property = &quot;likes&quot;, many = @Many(select = &quot;xyz.aiinirii.postalk.mapper.LikeMapper.findLikeByTId&quot;, fetchType = FetchType.LAZY))</span><br><span class="hljs-meta">            &#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-function">List&lt;Post&gt; <span class="hljs-title">findAllPost</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>  这样一来，每次我们需要查询Post的赞数时，我们只需要调用<code>post.getLikes().size()</code>方法。</p></li><li><p>点击按钮增加赞数</p><p>  思路：点击按钮时调用<code>LikeService</code>中的<code>like</code>方法，对传入的<code>uid</code>和<code>tid</code>进行查询，如果发现在<code>like</code>表中没有字段，则执行insert方法。</p></li><li><p>再次点击按钮减少赞数</p><p>  思路：同增加赞数的思想，只是如果发现<code>like</code>表中有字段时才会执行delete方法。</p><p>  以下是service层方法。</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LikeService</span> </span>&#123;<br><br>    LikeMapper likeMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLikeMapper</span><span class="hljs-params">(LikeMapper likeMapper)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.likeMapper = likeMapper;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * add like if the user haven&#x27;t liked,</span><br><span class="hljs-comment">     * delete like if the user already have liked</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tid text&#x27;s id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid user&#x27;s id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true if the operation is success</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">like</span><span class="hljs-params">(Integer tid, Integer uid)</span> </span>&#123;<br>        Like like = likeMapper.findLikeByTIdUId(tid, uid);<br>        <span class="hljs-keyword">if</span> (like == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> likeMapper.insertLike(tid, uid) == <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> likeMapper.deleteLike(tid, uid) == <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="匿名显示"><a href="#匿名显示" class="headerlink" title="匿名显示"></a>匿名显示</h3><p>只需要稍微对前端代码进行修改就可以了：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge badge-light&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;!post.anonymous?post.user.username:&#x27;anonymous&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这里加入一处判断，倘若post是匿名的，则不会显示用户的名字。</p><h2 id="5-好友模块"><a href="#5-好友模块" class="headerlink" title="5. 好友模块"></a>5. 好友模块</h2><p>有了之前的基础，这一模块就相对简单了，主要是实现以下几个特性：</p><ul><li>根据ID或用户名查找好友</li><li>添加好友</li><li>删除好友</li></ul><p>好友相关界面一览：</p><p><img src="/image/image-20200621121414466.png" alt="image-20200621121414466"></p><p><img src="/image/image-20200621115555366.png" alt="image-20200621115555366"></p><h3 id="根据ID或用户名查找好友"><a href="#根据ID或用户名查找好友" class="headerlink" title="根据ID或用户名查找好友"></a>根据ID或用户名查找好友</h3><p>这一部分主要使用的是<code>userService</code>有关的接口去操作，以下是controller层代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/friends/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">toMyFriendPage</span><span class="hljs-params">(ModelAndView modelAndView,</span></span><br><span class="hljs-params"><span class="hljs-function">                                   <span class="hljs-meta">@SessionAttribute(&quot;loginUser&quot;)</span> User user)</span> </span>&#123;<br>    List&lt;User&gt; friends = friendService.findAllFriendsByUId(user.getId());<br>    modelAndView.addObject(<span class="hljs-string">&quot;friends&quot;</span>, friends);<br>    modelAndView.setViewName(<span class="hljs-string">&quot;friend/myFriend&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/friend/search/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">findFriend</span><span class="hljs-params">(ModelAndView modelAndView,</span></span><br><span class="hljs-params"><span class="hljs-function">                               <span class="hljs-meta">@Param(&quot;findWay&quot;)</span> String findWay,</span></span><br><span class="hljs-params"><span class="hljs-function">                               <span class="hljs-meta">@Param(&quot;inputSearch&quot;)</span> String inputSearch,</span></span><br><span class="hljs-params"><span class="hljs-function">                               <span class="hljs-meta">@SessionAttribute(&quot;loginUser&quot;)</span> User user)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    List&lt;User&gt; friends = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (findWay.equals(<span class="hljs-string">&quot;id&quot;</span>) &amp;&amp; !user.getId().equals(Integer.valueOf(inputSearch))) &#123;<br>        friends.add(userService.findUserById(Integer.valueOf(inputSearch)));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay.equals(<span class="hljs-string">&quot;username&quot;</span>) &amp;&amp; !user.getUsername().equals(inputSearch)) &#123;<br>        friends = userService.findUserByUsername(inputSearch);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;Wrong with the findWay&quot;</span>);<br>    &#125;<br>    modelAndView.setViewName(<span class="hljs-string">&quot;/friend/result&quot;</span>);<br>    modelAndView.addObject(<span class="hljs-string">&quot;friends&quot;</span>, friends);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="添加好友"><a href="#添加好友" class="headerlink" title="添加好友"></a>添加好友</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/friend/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> ModelAndView <span class="hljs-title">addFriend</span><span class="hljs-params">(ModelAndView modelAndView,</span></span><br><span class="hljs-params"><span class="hljs-function">                               Integer id,</span></span><br><span class="hljs-params"><span class="hljs-function">                               <span class="hljs-meta">@SessionAttribute(&quot;loginUser&quot;)</span> User user)</span> </span>&#123;<br>    friendService.addFriend(user.getId(), id);<br>    List&lt;User&gt; friends = friendService.findAllFriendsByUId(user.getId());<br>    modelAndView.addObject(<span class="hljs-string">&quot;friends&quot;</span>, friends);<br>    modelAndView.setViewName(<span class="hljs-string">&quot;friend/myFriend&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到，这里主要是调用了service层的addFriend方法。具体操作便是向friend表单中插入字段。</p><h3 id="删除好友"><a href="#删除好友" class="headerlink" title="删除好友"></a>删除好友</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/friend/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">deleteFriend</span><span class="hljs-params">(ModelAndView modelAndView,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-meta">@SessionAttribute(&quot;loginUser&quot;)</span> User user)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (!friendService.deleteFriendById(user.getId(), id)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;the delete operation failed&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        List&lt;User&gt; friends = friendService.findAllFriendsByUId(user.getId());<br>        modelAndView.addObject(<span class="hljs-string">&quot;friends&quot;</span>, friends);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;friend/myFriend&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里用了delete方法，倘若搜索不到该用户，该方法会发出异常。</p><h2 id="6-评论模块"><a href="#6-评论模块" class="headerlink" title="6. 评论模块"></a>6. 评论模块</h2><p>评论模块需要实现以下几个功能：</p><ul><li>评论的创建删除修改匿名和显示</li><li>贴主可以管理评论，可以对评论进行删除操作</li></ul><p>效果图：</p><p><img src="/image/image-20200621225300015.png" alt="image-20200621225300015"></p><h3 id="评论的创建删除修改和匿名"><a href="#评论的创建删除修改和匿名" class="headerlink" title="评论的创建删除修改和匿名"></a>评论的创建删除修改和匿名</h3><h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><p>这里的要点是两个service层的方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createComment</span><span class="hljs-params">(Integer pid, Comment comment, User user)</span> </span>&#123;<br>    comment.setUser(user);<br>    comment.setTime(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis()));<br>    textMapper.insertText(comment);<br>    commentMapper.insertComment(pid);<br>&#125;<br><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteCommentById</span><span class="hljs-params">(Integer id, User user)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (commentMapper.findCommentById(id).getUser().getId().equals(user.getId())) &#123;<br>        <span class="hljs-keyword">return</span> commentMapper.deleteCommentById(id) == <span class="hljs-number">1</span> &amp;&amp;<br>                textMapper.deleteTextById(id) == <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;the user do not have right to delete the comment&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>createComment</code>在这里扮演的角色是执行comment的创建，这一点和post的创建过程是一样的；</p><p>而<code>deleteCommentById</code>方法则是和post的删除流程一样。</p><h4 id="’仅可删除自己的comment‘功能实现"><a href="#’仅可删除自己的comment‘功能实现" class="headerlink" title="’仅可删除自己的comment‘功能实现"></a>’仅可删除自己的comment‘功能实现</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;commentModule&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: auto&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group list-group-flush&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;comment: $&#123;post.comments&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group-item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge badge-light card-text&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;!comment.anonymous?comment.user.username:&#x27;anonymous&#x27;&#125;&quot;</span>&gt;</span>Light<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text col-sm-8&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;comment.content&#125;&quot;</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;&#x27;/comment/&#x27; + $&#123;comment.id&#125;&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;session.loginUser.id == comment.user.id&#125;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意到这里其实做了一个判断，如果登录的用户和该comment所属的用户不同的话，将不会出现表单。</p><p>同时为了防止恶意提交，在后台Service层也有相应的检查。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteCommentById</span><span class="hljs-params">(Integer id, User user)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (commentMapper.findCommentById(id).getUser().getId().equals(user.getId())) &#123; <span class="hljs-comment">// 检查该用户是否有权删除</span><br>        <span class="hljs-keyword">return</span> commentMapper.deleteCommentById(id) == <span class="hljs-number">1</span> &amp;&amp;<br>                textMapper.deleteTextById(id) == <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;the user do not have right to delete the comment&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="贴主可以管理评论，可以对评论进行删除操作"><a href="#贴主可以管理评论，可以对评论进行删除操作" class="headerlink" title="贴主可以管理评论，可以对评论进行删除操作"></a>贴主可以管理评论，可以对评论进行删除操作</h3><p>效果图</p><p><img src="/image/image-20200622111802772.png" alt="image-20200622111802772"></p><p>同之前的评论删除相似，这里仅仅是调整了各个评论的删除权限：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 前端代码调整，调整了按钮出现的逻辑 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;&#x27;/comment/&#x27; + $&#123;comment.id&#125;&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;session.loginUser.id&#125; == $&#123;comment.user.id&#125; or $&#123;session.loginUser.id&#125; == $&#123;comment.text.user.id&#125;&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 后端service 层删除代码调整</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteCommentById</span><span class="hljs-params">(Integer id, User user)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (commentMapper.findCommentById(id).getUser().getId().equals(user.getId()) || commentMapper.findCommentById(id).getText().getUser().getId().equals(user.getId())) &#123; <span class="hljs-comment">// 加入了判断该评论的父贴子的用户是否为登录用户的逻辑</span><br>        <span class="hljs-keyword">return</span> commentMapper.deleteCommentById(id) == <span class="hljs-number">1</span> &amp;&amp;<br>            textMapper.deleteTextById(id) == <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;the user do not have right to delete the comment&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>那么到此为止，一个基础的贴吧就做好了，但其实还和计划时差了一点（没有聊天模块）。随着项目的进行，我也才发现，如果要完成聊天模块的话自己欠缺的知识其实还有许多，那就先欠着吧:-D，等以后闲下来再去学，然后再把这个瘸腿项目给完善了。</p><p>另注：该项目已开源，下面是github项目传送门，来一起进步啊~</p><p><a href="https://github.com/AIINIRII/postalk">https://github.com/AIINIRII/postalk</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>spring</category>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
      <tag>Spring boot</tag>
      
      <tag>druid</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot-note</title>
    <link href="/2020/06/13/spring-boot-note/"/>
    <url>/2020/06/13/spring-boot-note/</url>
    
    <content type="html"><![CDATA[<h1 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h1><hr><h2 id="Value-amp-ConfigurationProperties"><a href="#Value-amp-ConfigurationProperties" class="headerlink" title="@Value&amp;ConfigurationProperties"></a>@Value&amp;ConfigurationProperties</h2><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定（较麻烦）</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>JSR303数据校验（@Email）</td><td>支持</td><td>不支持（加了之后无效）</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource:"></a>@PropertySource:</h2><ul><li>加载指定的配置文件</li></ul><h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource:"></a>@ImportResource:</h2><ul><li><p>加载Spring配置文件</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(location = &#123;&quot;xmlFilePath&quot;&#125;)</span><br></code></pre></div></td></tr></table></figure><p>  推荐使用全注解的方式：</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Bean id is the name of the method</span><br><span class="hljs-comment">// the return value is the object in IOC container.</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigurationClass</span></span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BeanMethod <span class="hljs-title">beanMethod</span><span class="hljs-params">()</span></span>&#123;<br>        ...<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Bean;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="Profile创建多个环境"><a href="#Profile创建多个环境" class="headerlink" title="Profile创建多个环境"></a>Profile创建多个环境</h1><hr><ul><li><p>默认application.properties</p></li><li><p>格式application-{name}.properties</p></li><li><p>配置方式：</p><ul><li><p>yaml</p><ul><li><p>用文档块来分环境</p>  <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span> <br><span class="hljs-attr">active:</span> &#123;<span class="hljs-string">env</span>&#125;<br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>properties</p><ul><li>spring.profile.active={env}</li><li>命令行<ul><li>–spring.profile.active={env}</li></ul></li><li>虚拟机<ul><li>-Dspring.profile.active={env}</li></ul></li></ul></li></ul></li></ul><h1 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h1><hr><p>按以下顺序（由高到低）：</p><ol><li>file: ./config/</li><li>file: ./</li><li>classpath: /config/</li><li>classpath: /</li></ol><p>高优先级文件会覆盖低优先级的文件。</p><p>若要指定路径，请用 –spring.config.location={path}</p><p>具体请看 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><hr><p>参照：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties</a></p><p>查看生效的自动配置类：debug=true</p><h1 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h1><hr><h2 id="HTML-文件格式"><a href="#HTML-文件格式" class="headerlink" title="HTML 文件格式"></a>HTML 文件格式</h2><p><img src="/image/image-20200614000632172.png" alt="image-20200614000632172"></p><h2 id="标准表达式"><a href="#标准表达式" class="headerlink" title="标准表达式"></a>标准表达式</h2><ul><li>Simple expressions:<ul><li>Variable Expressions: ${…}</li><li>Selection Variable Expressions: *{…}</li><li>Message Expressions: #{…}</li><li>Link URL Expressions: @{…}</li><li>Fragment Expressions: ~{…}</li></ul></li><li>Literals<ul><li>Text literals: ‘one text’ , ‘Another one!’ ,…</li><li>Number literals: 0 , 34 , 3.0 , 12.3 ,…</li><li>Boolean literals: true , false</li><li>Null literal: null</li><li>Literal tokens: one , sometext , main ,…</li></ul></li><li>Text operations:<ul><li>String concatenation: +</li><li>Literal substitutions: |The name is ${name}|</li></ul></li><li>Arithmetic operations:<ul><li>Binary operators: + , - , * , / , %</li><li>Minus sign (unary operator): -</li></ul></li><li>Boolean operations:<ul><li>Binary operators: and , or</li><li>Boolean negation (unary operator): ! , not</li></ul></li><li>Comparisons and equality:<ul><li>Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</li><li>Equality operators: == , != ( eq , ne )</li></ul></li><li>Conditional operators:<ul><li>If-then: (if) ? (then)</li><li>If-then-else: (if) ? (then) : (else)</li><li>Default: (value) ?: (defaultvalue)</li></ul></li><li>Special tokens: <ul><li>No-Operation: _  </li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">Message Expressions: #&#123;...&#125;<br><br>    #ctx : the context object.<br>    #vars: the context variables.<br>    #locale : the context locale.<br>    #request : (only in Web Contexts) the HttpServletRequest object.<br>    #response : (only in Web Contexts) the HttpServletResponse object.<br>    #session : (only in Web Contexts) the HttpSession object.<br>    #servletContext : (only in Web Contexts) the ServletContext object<br>    #execInfo : information about the template being processed.<br>    #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they<br>    would be obtained using #&#123;…&#125; syntax.<br>    #uris : methods for escaping parts of URLs/URIs<br>    Page 20 of 106#conversions : methods for executing the configured conversion service (if any).<br>    #dates : methods for java.util.Date objects: formatting, component extraction, etc.<br>    #calendars : analogous to #dates , but for java.util.Calendar objects.<br>    #numbers : methods for formatting numeric objects.<br>    #strings : methods for String objects: contains, startsWith, prepending/appending, etc.<br>    #objects : methods for objects in general.<br>    #bools : methods for boolean evaluation.<br>    #arrays : methods for arrays.<br>    #lists : methods for lists.<br>    #sets : methods for sets.<br>    #maps : methods for maps.<br>    #aggregates : methods for creating aggregates on arrays or collections.<br>    #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>spring</category>
      
      <category>spring boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC</title>
    <link href="/2020/06/12/springmvc-note-1/"/>
    <url>/2020/06/12/springmvc-note-1/</url>
    
    <content type="html"><![CDATA[<h1 id="三层架构-REVIEW"><a href="#三层架构-REVIEW" class="headerlink" title="三层架构 REVIEW"></a>三层架构 REVIEW</h1><ul><li>表现层<ul><li>Spring MVC</li></ul></li><li>业务层<ul><li>Spring</li></ul></li><li>持久层<ul><li>Mybatis</li></ul></li></ul><p>表现层需要做：</p><ol><li>接收请求</li><li>响应结果</li></ol><hr><h1 id="MVC-REVIEW"><a href="#MVC-REVIEW" class="headerlink" title="MVC REVIEW"></a>MVC REVIEW</h1><ul><li>Model （模型）<ul><li>java bean</li></ul></li><li>View （视图）<ul><li>jsp || HTML</li></ul></li><li>Controller （控制器）<ul><li>servlet</li></ul></li></ul><hr><h1 id="Spring-MVC-优势"><a href="#Spring-MVC-优势" class="headerlink" title="Spring MVC 优势"></a>Spring MVC 优势</h1><h2 id="角色划分清晰"><a href="#角色划分清晰" class="headerlink" title="角色划分清晰"></a>角色划分清晰</h2><ul><li>前端控制器（DispatcherServlet）</li><li>请求到处理器映射（HandlerMapping）</li><li>处理器适配器（HandlerAdapter）</li><li>视图解析器（ViewResolver）</li><li>处理器或页面控制器（Controller）</li><li>验证器（ Validator）</li><li>命令对象（Command 请求参数绑定到的对象就叫命令对象）</li><li>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）</li></ul><hr><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><ol><li>Client – Request -&gt; DispatcherServlet</li><li>DispatcherServlet – Request for Handler -&gt; HandlerMapping</li><li>HandllerMapping find the Method position</li><li>HandlerMapping – Response an executable chain -&gt; DispatcherServlet</li><li>DispatcherServlet – Request for execute -&gt; HandlerAdapter</li><li>HandlerAdapter – Execute -&gt; Handler/Controller</li><li>Handler/Controller – Response Model and View -&gt; HandlerAdapter</li><li>HandlerAdapter – Response Model and View -&gt; DispatcherServlet</li><li>DispatcherServlet – Request for view resolve -&gt; ViewResolver</li><li>ViewResolver – Response the View -&gt; DispatcherServlet</li><li>DispatcherServlet – Apply Colors to a Drawing -&gt; View</li><li>DispatcherServlet – Response -&gt; Client</li></ol><hr><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/Path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;nameInRequest&quot;)</span> String username)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// get 不适用；异步时传json有用</span><br><span class="hljs-comment">// 获得类似(&quot;username=name&amp;age=20&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/Path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String body)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// REST 风格</span><br><span class="hljs-meta">@RequestMapping(&quot;/Path/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(name = &quot;id&quot;)</span> String id)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 获得请求头的值</span><br><span class="hljs-meta">@RequestMapping(&quot;/Path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value = &quot;HeaderName&quot;)</span> String header)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 获得cookie</span><br><span class="hljs-meta">@RequestMapping(&quot;/Path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;CookieName&quot;)</span> String cookie)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 放在方法上，该方法会先执行</span><br><span class="hljs-meta">@ModelAttribute</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">attributeMethod</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    ...<br>    <span class="hljs-keyword">return</span> attribute;<br>&#125;<br><br><span class="hljs-comment">// 获得attribute</span><br><span class="hljs-meta">@RequestMapping(&quot;/Path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">method</span><span class="hljs-params">(Attribute attribute)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 第二种写法，利用Map</span><br><span class="hljs-meta">@ModelAttribute</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attributeMethod</span><span class="hljs-params">(String id, Map&lt;String, Attribute&gt; map)</span> </span>&#123;<br>    ...<br>    map.put(id, attribute);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/Path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(value = id)</span> Attribute attribute)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="SessionAttribute"><a href="#SessionAttribute" class="headerlink" title="@SessionAttribute"></a>@SessionAttribute</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// add attribute to session</span><br><span class="hljs-meta">@RequestMapping(&quot;/Path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">setSessionAttribute</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;key&quot;</span>, value);<br>    ...<br>&#125;<br><br><span class="hljs-comment">// get attribute from session</span><br><span class="hljs-meta">@RequestMapping(&quot;/path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSessionAttribute</span><span class="hljs-params">(ModelMap modelMap)</span> </span>&#123;<br>    result = (String) modelMap.get(<span class="hljs-string">&quot;key&quot;</span>);<br>    ...<br>&#125;<br><br><span class="hljs-comment">// delete attribute from session</span><br><span class="hljs-meta">@RequestMapping(&quot;/path&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteSessionAttribute</span><span class="hljs-params">(SessionStatus status)</span> </span>&#123;<br>    status.setComplete();<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="REST-风格："><a href="#REST-风格：" class="headerlink" title="REST 风格："></a>REST 风格：</h3><p><em>restfule</em>: 对多个方法来说请求地址相同，根据不同的请求方式来做不同的功能。</p><hr><h1 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h1><p>拦截器为SpringMVC特有，过滤器是Sevrlet的一部分。</p><ul><li>过滤器：<ul><li>在url-pattern配置/*之后，可以对所有要访问的资源拦截。</li></ul></li><li>拦截器：<ul><li>只会拦截访问的控制器方法，如果是jsp，html之类就不会拦截。</li></ul></li></ul><p>理解：拦截器是弱化版的拦截器。</p><h3 id="拦截器中拦截方法的顺序："><a href="#拦截器中拦截方法的顺序：" class="headerlink" title="拦截器中拦截方法的顺序："></a>拦截器中拦截方法的顺序：</h3><p>preHandle - &gt; method - &gt; postHandle - &gt; jsp - &gt; afterCompletion</p><h3 id="如果有两个拦截器（1-gt-2-gt-Controller）："><a href="#如果有两个拦截器（1-gt-2-gt-Controller）：" class="headerlink" title="如果有两个拦截器（1 -&gt; 2 -&gt; Controller）："></a>如果有两个拦截器（1 -&gt; 2 -&gt; Controller）：</h3><p>preHandle1 - &gt; preHandle2 - &gt; method - &gt; postHandle2 - &gt; postHandle1 - &gt; jsp - &gt; afterCompletion2 - &gt; afterCompletion1</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>spring</category>
      
      <category>spring MVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 笔记（四）</title>
    <link href="/2020/06/10/spring-note-4/"/>
    <url>/2020/06/10/spring-note-4/</url>
    
    <content type="html"><![CDATA[<h1 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h1><p>有关事务传播行为：<a href="https://segmentfault.com/a/1190000013341344">https://segmentfault.com/a/1190000013341344</a></p><p>有关事务隔离行为：</p><ul><li>isolation：用于指定事务的隔离级别。默认是DEFALUT，表示使用数据库的默认隔离级别。</li><li>propagation：用于指定事物的传播行为，默认值是REQUIRED，这是增删改的选择。查询可用SUPPORTS。</li><li>read-only：用于指定事务是否只读，查询为true，默认为false。</li><li>timeout：用于指定事务的超时时间，默认为-1永不超时。以秒为单位。</li><li>rollback-for：用于指定一个异常，当产生这个异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值，表示任何异常都会滚。</li><li>no-rollback-for：用于指定一个异常，当产生这个异常时，事务不回滚，产生其他异常时，事务回滚。没有默认值，表示任何异常都会滚。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>spring</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 笔记（三）</title>
    <link href="/2020/06/10/spring-note-3/"/>
    <url>/2020/06/10/spring-note-3/</url>
    
    <content type="html"><![CDATA[<p><em>AOP: Aspect Oriented Programing 面向切面编程</em></p><p>使用动态代理实现AOP</p><p>传统方法：</p><ul><li>基于接口的动态代理：Proxy.newProxyInstance</li><li>基于子类的动态代理：Enhancer.create</li></ul><p>术语：</p><ul><li>JoinPoint（连接点）：所代理类的所有方法。</li><li>Pointcut（切入点）：被增强的方法是切入点。</li><li>Advice（通知/增强）：拦截到JoinPoint之后要做的事情。<ul><li>前置通知<ul><li>事务前</li></ul></li><li>后置通知<ul><li>事务后</li></ul></li><li>异常通知<ul><li>catch中</li></ul></li><li>最终通知<ul><li>finally中</li></ul></li><li>环绕通知<ul><li>整个invoke</li></ul></li></ul></li><li>Target（目标对象\被代理对象）</li><li>Introduction（引介）：特殊的通知</li><li>Weaving（织入）：根据目标对象创建代理对象的过程</li><li>Proxy（代理）：织入增强后产生的代理类</li><li>Aspect（切面）：切入点和通知的结合</li></ul><hr><h1 id="基于Spring的AOP编程"><a href="#基于Spring的AOP编程" class="headerlink" title="基于Spring的AOP编程"></a>基于Spring的AOP编程</h1><h2 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h2><h3 id="配置XML文件"><a href="#配置XML文件" class="headerlink" title="配置XML文件"></a>配置XML文件</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xyz.aiinirii.spring.utils.Logger&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAdvice&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logger&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 类比在事务之前所做的事情 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforePrintLog&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 类比在事务成功之后所做的事情 例如 commit --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningPrintLog&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 例如回滚 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingPrintLog&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 例如关闭链接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterPrintLog&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行效果，saveAccount方法得到了增强：</p><p><img src="/image/image-20200610151556148.png" alt="image-20200610151556148"></p><p>或者这样：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xyz.aiinirii.spring.utils.Logger&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAdvice&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logger&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforePrintLog&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningPrintLog&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingPrintLog&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterPrintLog&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="环绕通知？"><a href="#环绕通知？" class="headerlink" title="环绕通知？"></a>环绕通知？</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xyz.aiinirii.spring.utils.Logger&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAdvice&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logger&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundPrintLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="/image/image-20200610152558086.png" alt="image-20200610152558086"></p><p>发现并没有执行被增强的函数。切入点方法没有执行，而通知方法执行了。</p><p>原因分析：并没有在环绕通知中调用切入点方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">aroundPrintLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span></span>&#123;<br>    Object rtValue = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before Print Log...&quot;</span>);<br>        rtValue = joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;After Return Print Log...&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>        System.out.println(<span class="hljs-string">&quot;After Throwing Print Log...&quot;</span>);<br>        throwable.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;After Print Log...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> rtValue;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xyz.aiinirii.spring.utils.Logger&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAdvice&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logger&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundPrintLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;serviceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>Logger 类，通知类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AIINIRII</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;logger&quot;)</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforePrintLog</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Before Print Log...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturningPrintLog</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;After Return Print Log...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowingPrintLog</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;After Throwing Print Log...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPrintLog</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;After Print Log...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// @Around(&quot;execution(* xyz.aiinirii.spring.service.impl.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">aroundPrintLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span></span>&#123;<br>        Object rtValue = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Before Print Log...&quot;</span>);<br>            rtValue = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;After Return Print Log...&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            System.out.println(<span class="hljs-string">&quot;After Throwing Print Log...&quot;</span>);<br>            throwable.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;After Print Log...&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> rtValue;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>AccountServiceImpl 类，Target 类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> xyz.aiinirii.spring.service.IAccountService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AIINIRII</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(&quot;accountService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IAccountService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveAccount</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Successfully save the account.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>提取重复代码:arrow_right:创建代理对象</p><p>从而实现AOP</p><p><em>提示，尽量用@Around（）否则最终和异常/后置顺序将会出错。</em></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>spring</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 笔记（二）</title>
    <link href="/2020/06/09/spring-note-2/"/>
    <url>/2020/06/09/spring-note-2/</url>
    
    <content type="html"><![CDATA[<h1 id="基于注解的IOC配置"><a href="#基于注解的IOC配置" class="headerlink" title="基于注解的IOC配置"></a>基于注解的IOC配置</h1><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>需要首先扫描包。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加命名空间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 扫描包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;xyz.aiinirii&quot;</span>/&gt;</span><br><br></code></pre></div></td></tr></table></figure><hr><h3 id="注解格式"><a href="#注解格式" class="headerlink" title="注解格式"></a>注解格式</h3><ul><li>@Component（是以下三种注解的父类）：<ul><li>作用：把当前类对象存入IOC中</li><li>属性：<ul><li>value：用于指定bean的ID，默认值是当前类名首字母小写。</li></ul></li></ul></li><li>@Controller：表现层</li><li>@Service：业务层</li><li>@Repository：持久层</li></ul><p><em>以上四种注释方式仅仅名字不同，这样区分可以让我们的三层对象更加清晰。</em></p><hr><h3 id="注解注入"><a href="#注解注入" class="headerlink" title="注解注入"></a>注解注入</h3><h4 id="Bean-类型"><a href="#Bean-类型" class="headerlink" title="Bean 类型"></a>Bean 类型</h4><ul><li><p>@Autowired：</p><ul><li>根据类型注入，只要容器中有唯一一个bean对象的类型和要注入的变量类型匹配，就注入成功。</li><li>如果有两个匹配类型，那么就按照变量名称来筛选bean id（选那个和bean id一样的）。</li></ul></li><li><p>@Qualifier：</p><ul><li><p>不能独立使用</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;BeanId&quot;)</span><br><span class="hljs-keyword">private</span> BeanClass beanName = <span class="hljs-keyword">null</span>;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>@Source:</p><ul><li><p>独立使用</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Resource(&quot;BeanId&quot;)</span><br><span class="hljs-keyword">private</span> BeanClass beanName = <span class="hljs-keyword">null</span>;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h4 id="基本类型和String类型"><a href="#基本类型和String类型" class="headerlink" title="基本类型和String类型"></a>基本类型和String类型</h4><ul><li>@Value：<ul><li>属性：<ul><li>value：用SpEL（spring的EL表达式）方式写 - ${param}</li></ul></li></ul></li></ul><h4 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h4><p>只能用xml实现</p><hr><h3 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h3><ul><li>作用范围 - @Scope - 同上次笔记中的scope</li><li>初始化 - @PostConstruct - 初始化对象</li><li>销毁 - @PreDestory - 销毁对象</li></ul><hr><h2 id="配置文件（-Configuration）"><a href="#配置文件（-Configuration）" class="headerlink" title="配置文件（@Configuration）"></a>配置文件（@Configuration）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;PackageName&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Configuration</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Bean(name = &quot;BeanId&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BeanClass <span class="hljs-title">createBeanMethod</span><span class="hljs-params">(ParamClass param)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> beanObject;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean(name = &quot;param&quot;)</span><br>    <span class="hljs-function">publi ParamClass <span class="hljs-title">createParamMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> paramObject;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时构造ApplicationContext时需要选择：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ApplicationContext ac = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(ConfigurationClass);<br></code></pre></div></td></tr></table></figure><hr><h2 id="导入其他配置类（-Import）"><a href="#导入其他配置类（-Import）" class="headerlink" title="导入其他配置类（@Import）"></a>导入其他配置类（@Import）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;PackageName&quot;)</span><br><span class="hljs-meta">@Import(AnotherConfigurationClass)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Configuration</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Bean(name = &quot;BeanId&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BeanClass <span class="hljs-title">createBeanMethod</span><span class="hljs-params">(ParamClass param)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> beanObject;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean(name = &quot;param&quot;)</span><br>    <span class="hljs-function">publi ParamClass <span class="hljs-title">createParamMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> paramObject;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="导入PropertySource（-PropertySource）"><a href="#导入PropertySource（-PropertySource）" class="headerlink" title="导入PropertySource（@PropertySource）"></a>导入PropertySource（@PropertySource）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;PackageName&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:PropertyFilePath&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Configuration</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;PropertyId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> ParamType param;<br>    <br>    <span class="hljs-meta">@Bean(name = &quot;BeanId&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BeanClass <span class="hljs-title">createBeanMethod</span><span class="hljs-params">(ParamClass param)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> beanObject;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean(name = &quot;param&quot;)</span><br>    <span class="hljs-function">publi ParamClass <span class="hljs-title">createParamMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> paramObject;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="Spring整合Junit的配置"><a href="#Spring整合Junit的配置" class="headerlink" title="Spring整合Junit的配置"></a>Spring整合Junit的配置</h2><ol><li><p>导入spring整合的Junit坐标</p></li><li><p>使用Junit提供的一个注解把原有main方法替换成spring提供的方法。</p><p> @RunWith</p></li><li><p>告知spring的运行器，spring和IOC是基于xml或注解？</p><p> @ContextConfiguration</p><ul><li><p>locations：指定xml文件的位置，加上classpath关键字，表明在类路径下。</p></li><li><p>classes：指定注解类所在的位置。</p></li></ul></li></ol><hr><p>课程链接：</p><p><a href="https://www.bilibili.com/video/BV1Sb411s7vP?from=search&amp;seid=11893869544331926521">https://www.bilibili.com/video/BV1Sb411s7vP?from=search&amp;seid=11893869544331926521</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>spring</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 笔记（一）</title>
    <link href="/2020/06/07/spring-note/"/>
    <url>/2020/06/07/spring-note/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要用-Spring"><a href="#为什么要用-Spring" class="headerlink" title="为什么要用 Spring"></a>为什么要用 Spring</h1><p>为了解耦！</p><p>那么何为解耦？</p><h2 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h2><p>指程序间的依赖关系：</p><ul><li><p>包括类之间的依赖</p></li><li><p>包括方法之间的依赖</p></li></ul><h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><ul><li><p>降低程序间的依赖关系</p></li><li><p>做到编译的时候不依赖（报错？），运行时才依赖。</p></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>用反射来创建对象。</li><li>读取配置文件来读取要创建的对象的全限定类名。</li></ul><hr><h1 id="IOC-容器详解"><a href="#IOC-容器详解" class="headerlink" title="IOC 容器详解"></a>IOC 容器详解</h1><p><strong>IOC: Inversion of Control</strong></p><p><em>关键词：工厂模式，单例模式，线程安全。</em></p><ul><li><em>单例模式实现思路：新建静态 Map 共享 value 。</em></li></ul><p>原来：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> IUserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br></code></pre></div></td></tr></table></figure><p>IOC 实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> IUserDao userDao = (IUserDao) BeanFactory.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>作用：控制反转，将控制权转移给 BeanFactory，从而割断与 Dao 层的直接联系，从而达到解耦。</p><p><em>注：以上的例子里，userDao 的新建对象任务已经交给了工厂。这样操作之后，编译时不会有依赖，但是运行时会有依赖。</em></p><p>IOC 的本质：把创建对象的权力交给框架。</p><hr><h1 id="Spring-中的-IOC"><a href="#Spring-中的-IOC" class="headerlink" title="Spring 中的 IOC"></a>Spring 中的 IOC</h1><p>ApplicationContext 的三个常用实现类：</p><ul><li>ClassPathXmlApplicationContext：加载类路径下的配置文件，必须要在类路径下，否则免谈。（常用）</li><li>FileSystemXmlApplicationContext：加载磁盘任意路径下的配置文件。</li><li>AnnotationConfigApplicationContext：用于读取注解容器。（常用）</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>); <span class="hljs-comment">// 运行这行时已经创建了对象。</span><br><br>IAccountService accountService = applicationContext.getBean(<span class="hljs-string">&quot;accountService&quot;</span>, IAccountService.class);<br>IAccountDao accountDao = applicationContext.getBean(<span class="hljs-string">&quot;accountDao&quot;</span>, IAccountDao.class);<br></code></pre></div></td></tr></table></figure><p>或者用 BeanFactory 实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Resource resource = <span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>BeanFactory beanFactory = <span class="hljs-keyword">new</span> DefaultListableBeanFactory();<br>BeanDefinitionReader beanDefinitionReader = <span class="hljs-keyword">new</span> XmlBeanDefinitionReader((BeanDefinitionRegistry) beanFactory);<br>beanDefinitionReader.loadBeanDefinitions(resource);<br><br><span class="hljs-comment">// 只有当创建了 Bean 之后才创建对象。</span><br>IAccountService accountService = beanFactory.getBean(<span class="hljs-string">&quot;accountService&quot;</span>, IAccountService.class);<br>IAccountDao accountDao = beanFactory.getBean(<span class="hljs-string">&quot;accountDao&quot;</span>, IAccountDao.class);<br><br>System.out.println(<span class="hljs-string">&quot;accountDao = &quot;</span> + accountDao);<br>System.out.println(<span class="hljs-string">&quot;accountService = &quot;</span> + accountService);<br></code></pre></div></td></tr></table></figure><ul><li>ApplicationContext 适用于单例对象，BeanFactory 适用于多例对象。</li><li>ApplicationContext 采用立即方式加载，BeanFactory 采用延迟方式加载。</li></ul><hr><h1 id="Spring-中-Bean-的管理细节"><a href="#Spring-中-Bean-的管理细节" class="headerlink" title="Spring 中 Bean 的管理细节"></a>Spring 中 Bean 的管理细节</h1><h3 id="创建-Bean-对象的三种方式"><a href="#创建-Bean-对象的三种方式" class="headerlink" title="创建 Bean 对象的三种方式"></a>创建 Bean 对象的三种方式</h3><ol><li><p>使用默认构造函数来创建Bean对象</p><p> <em>如果没有默认构造函数，则无法创建Bean对象</em></p> <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ClassName&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>用某个类中的方法创建对象并存入Spring容器</p> <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;FactoryId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ClassName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassId&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;FactoryBeanName&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;MethodInFactory&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用类中的静态方法创建对象并存入Spring容器</p> <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;FactoryName&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;MethodInFactory&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><hr><h3 id="Bean-对象的作用范围"><a href="#Bean-对象的作用范围" class="headerlink" title="Bean 对象的作用范围"></a>Bean 对象的作用范围</h3><p>对象默认为单例，如果要调整则更改scope参数。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ClassName&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>参数可以为：</p><ul><li>singleton：单例（缺省值）</li><li>prototype：多例</li><li>request：web请求范围</li><li>session：web会话范围</li><li>global-session：集群环境的会话范围 - 负载均衡状况下产生的global-session</li></ul><hr><h3 id="Bean-对象的生命周期"><a href="#Bean-对象的生命周期" class="headerlink" title="Bean 对象的生命周期"></a>Bean 对象的生命周期</h3><ol><li>单例对象<ul><li>容器创建时对象产生</li><li>容器存在时对象存在</li><li>容器销毁时对象关闭</li></ul></li><li>多例对象<ul><li>使用容器获得对象时产生</li><li>只要没有关闭对象，对象就会存在</li><li>Java的垃圾回收机制</li></ul></li></ol><hr><h1 id="Spring-的依赖注入"><a href="#Spring-的依赖注入" class="headerlink" title="Spring 的依赖注入"></a>Spring 的依赖注入</h1><p><em>依赖注入：Dependency Injection</em></p><p>我们将依赖关系的管理都交给 Spring。而我们所需要做的就是在配置文件中说明。</p><hr><h3 id="三种注入数据类型："><a href="#三种注入数据类型：" class="headerlink" title="三种注入数据类型："></a>三种注入数据类型：</h3><ol><li><p>基本类型和 String</p><p> 直接填入value</p></li><li><p>其他 Bean 类型</p><p> 新建 Bean 并引用</p> <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ClassName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;BeanName&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;BeanId&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BeanId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;BeanClassName&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>复杂类型/集合类型</p> <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ClassName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;setName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>AAA<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BBB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>CCC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;listName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>AAA<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BBB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>CCC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 除此之外还有 map array props 等等标签，其中 list set array 可以互换 map props 可以互换--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><hr><h3 id="三种注入方式："><a href="#三种注入方式：" class="headerlink" title="三种注入方式："></a>三种注入方式：</h3><ol><li><p>使用构造函数</p><p> 使用的标签：constructor-arg</p><p> 其中的属性：</p><ul><li><p>type</p><p>  指定类型</p></li><li><p>index</p><p>  指定参数索引的位置（从0开始）</p></li><li><p>name</p><p>  指定给构造函数中指定的参数赋值 （常用）</p></li><li><p>value</p><p>  提供基本类型或String类型的数据</p></li><li><p>ref</p><p>  其他Bean对象的 ID，在IOC中出现过的对象都可以</p></li></ul></li><li><p>使用set方法（常用）</p><p> 使用的标签：property</p> <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ClassName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;[set]name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用注解：<a href="/2020/06/09/spring-note-2/">见笔记（二）</a></p></li></ol><hr><p>课程链接：</p><p><a href="https://www.bilibili.com/video/BV1Sb411s7vP?from=search&amp;seid=11893869544331926521">https://www.bilibili.com/video/BV1Sb411s7vP?from=search&amp;seid=11893869544331926521</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>spring</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven 项目目录管理</title>
    <link href="/2020/06/05/maven-catalogue/"/>
    <url>/2020/06/05/maven-catalogue/</url>
    
    <content type="html"><![CDATA[<p>最近在尝试用 Maven 写项目，但奈何功夫不到家，刚开始就被 Maven 项目的目录安排给难住了。</p><p><img src="/image/00678B33.jpg" alt="img"></p><p>先介绍一下情况，我的项目（project）将会分为若干模块（module）。</p><p>大概是下面这样的情况：</p><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml">-<span class="ruby"> project</span><br><span class="ruby"></span>-<span class="ruby"> <span class="hljs-class"><span class="hljs-keyword">module</span> 1</span></span><br><span class="ruby"></span>-<span class="ruby"> <span class="hljs-class"><span class="hljs-keyword">module</span> 2</span></span><br><span class="ruby"></span>-<span class="ruby"> <span class="hljs-class"><span class="hljs-keyword">module</span> 3</span></span><br></code></pre></div></td></tr></table></figure><p>而我仔细一想，这个问题其实可以分成几个小问题：</p><ul><li>如何命名项目的 groupId 和 artifactId。</li><li>子 Maven 项目和父 Maven 项目之间的关系。</li></ul><p>话不多说，切入正题。</p><hr><h1 id="如何命名项目的-groupId-和-artifactId"><a href="#如何命名项目的-groupId-和-artifactId" class="headerlink" title="如何命名项目的 groupId 和 artifactId"></a>如何命名项目的 groupId 和 artifactId</h1><p>首先，我们需要知道的是这里的 groupId 和 artifactId 其实代表的是项目的坐标。</p><p>举个例子，</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这两行实际上就可以帮助我们定位这个项目，它将会在 org/apache/maven/plugins/maven-compiler-plugin/ 这个文件夹下。</p><p>那其实我们的问题就迎刃而解了，假如说，在 aiinirii.xyz 这个域名下我想要建一个名为 proj 的项目。</p><p><img src="/image/image-20200608145503912.png" alt="image-20200608145503912"></p><p>这里要注意的，Location 其实和 GroupId 并无关系，其实只是源代码的存储路径，在 Maven 项目 Install 之后其实会直接被载入本地的 Maven 仓库中的 xyz/aiinirii/proj 目录下，只需要保证不会与其他坐标产生冲突就可以。</p><hr><h1 id="子-Maven-项目和父-Maven-项目之间的关系"><a href="#子-Maven-项目和父-Maven-项目之间的关系" class="headerlink" title="子 Maven 项目和父 Maven 项目之间的关系"></a>子 Maven 项目和父 Maven 项目之间的关系</h1><p>讲清楚了如何命名项目，接下来再介绍一下如果像我一样，多项目之间有父子依赖关系怎么办？</p><p>首先，我们需要建一个父项目，例如设置 groupId 和 artifactId 分别为：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xyz.aiinirii<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>learn<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这个父项目将会有若干个子项目，这里我新建一个名为 spring 的项目当例子：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>learn<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xyz.aiinirii<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xyz.aiinirii.learn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>建完该子项目之后，需要将父项目的 pom.xml 文件改成：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xyz.aiinirii<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>learn<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>spring<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>可以看到，两者的关联已经产生了。在 Maven 软件部署之后，新建的这个名为 spring 的项目将会根据它的 groupId 成为父项目 learn 目录下的一个子项目。</p><p>两者之间的关系是，父项目中引入的包，子项目中不需要再次调配，我们可以发现，这种方式可以保证同一父项目下的各个子项目的环境的统一，同时还便于管理。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>项目打包之后的路径（groupId）使用域名反写的方式。</li><li>artifactId 及项目名称，最终会被安置在 groupId 路径下。</li><li>使用多模块开发的方式，可以统一管理 Maven 项目环境。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目命名宝典</title>
    <link href="/2020/06/02/name-the-project/"/>
    <url>/2020/06/02/name-the-project/</url>
    
    <content type="html"><![CDATA[<p>如何给项目命名？想必各位 coder 都常为此苦恼不已。这里我稍微整理了一下几个比较规范的命名规则，主要还是自己看啦！</p><p>欢迎大家补充哦 :-)</p><hr><h2 id="一、项目名"><a href="#一、项目名" class="headerlink" title="一、项目名"></a>一、项目名</h2><p>全部小写，比如 cms、workdesk、jobserver 等</p><h2 id="二、java相关命名"><a href="#二、java相关命名" class="headerlink" title="二、java相关命名"></a>二、java相关命名</h2><ol><li><p>类命名：每音节单词前的第一个字母大写，比如 FieldInfo、Expression 等</p></li><li><p>普通变量(包括spring里的变量引用命名)：第一个单词前小写，以后每个单词第一个字母大写，比如：password、primaryFlag</p></li><li><p>静态变量：全部大写，多个单词则以_分开，比如BOOLEAN_FLAG</p></li><li><p>包package命名：全部小写,比如 com.joinspider.workdesk</p></li><li><p>类名、变量名是名字组合，多名词顺序和中文顺序一样，比如 ScriptEngine</p></li><li><p>属性也可以是形容词 + 名词</p></li><li><p>常量可使用上述规则，如果为了体现多个常量是一组的概念，也可以被修饰前置，比如：VAR_START，VAR_END.</p></li><li><p>方法是动词 + 名字或者只有动词</p></li><li><p> Import 需要指出 import 哪一个类，禁止 import 整个 package</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight java"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*; <span class="hljs-comment">//错误</span><br><br><span class="hljs-keyword">import</span> java.util.HashMap; <span class="hljs-comment">//正确</span><br></code></pre></div></td></tr></table></figure></code></pre><ol start="10"><li>Test Class 名的格式为“测试对象 Class 名 **+ Test **”</li><li>进行测试或 Package 测试的所有的 Class 名的格式为“**AllTest **”或“Package 名 <strong>+ Test</strong>”</li><li>生成 Object 的 Method 名的格式是“**”create” + **Object 名”</li><li>转换 Method 名的格式是“**”to” +** Object 名”</li><li>在查询方法中应使用find作为前缀</li></ol><h2 id="三、属性文件-properties定义变量命名"><a href="#三、属性文件-properties定义变量命名" class="headerlink" title="三、属性文件.properties定义变量命名"></a>三、属性文件.properties定义变量命名</h2><p>object.a_b_c 格式，全部小写，其中 object 是宿主，a_b_c 多个单词下划线分开。</p><p>例：hibernate.cache.use_second_level_cache、hibernate.cache.provider_class、hibernate.cache.provider_configuration_file_resource_path</p><h2 id="四、xml-文件命名"><a href="#四、xml-文件命名" class="headerlink" title="四、xml 文件命名"></a>四、xml 文件命名</h2><p>全部小写，-符号是其 xml 的用途说明，类似 applicationContext 属习惯命名。比如 springmvc-servlet.xml、workdesk-manager.xml、workdesk-servlet.xml、applicationContext-basic.xml 等<br>xml里的内容多个字符间以-隔开，比如 param-name、filter-mapping等</p><h2 id="五、普通文件命名-jsp-js-img-等"><a href="#五、普通文件命名-jsp-js-img-等" class="headerlink" title="五、普通文件命名( jsp, js, img 等)"></a>五、普通文件命名( jsp, js, img 等)</h2><p>和 Java 普通变量规范相同</p><h2 id="六、属性文件-properties"><a href="#六、属性文件-properties" class="headerlink" title="六、属性文件 properties"></a>六、属性文件 properties</h2><p>以下划线隔开：errors_zh_CN.properties，hibernate_test.properties</p><h2 id="七、数据库命名："><a href="#七、数据库命名：" class="headerlink" title="七、数据库命名："></a>七、数据库命名：</h2><p>表、字段命名全部大写，多个单词以_隔开</p><h2 id="八、包名命名规范"><a href="#八、包名命名规范" class="headerlink" title="八、包名命名规范"></a>八、包名命名规范</h2><p>我们知道，一般公司命名为“com.公司名.项目名.模块名…”。</p><p>这里事实上 “com” 代表的是该公司的域名。</p><p>除了 com 之外，域又分为 org、com、cn 等等许多，其中 org 为非营利组织，com 为商业组织。</p><p><strong>如果没有域名的话，你可以以自创的独一无二的域名开头，最重要的其实是防止发生冲突。</strong></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://blog.csdn.net/weixin_42618873/article/details/90694514">https://blog.csdn.net/weixin_42618873/article/details/90694514</a></p><p>[2] <a href="https://blog.csdn.net/youyaecho/article/details/51179023">https://blog.csdn.net/youyaecho/article/details/51179023</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis 笔记</title>
    <link href="/2020/05/30/Mybatis-notes/"/>
    <url>/2020/05/30/Mybatis-notes/</url>
    
    <content type="html"><![CDATA[<p>终于，本:herb::baby_chick:结束了长达一个多月的DDL战争，重拾旧爱。</p><p>接下来几天要开始按照 Mybatis -&gt; Spring -&gt; Spring MVC 的流程爬一遍！</p><p><img src="/image/017C679B.jpg" alt="img"></p><hr><h3 id="一、-XML-配置-与基础-CURD-的-XML-实现"><a href="#一、-XML-配置-与基础-CURD-的-XML-实现" class="headerlink" title="一、 XML 配置 与基础 CURD 的 XML 实现"></a>一、 XML 配置 与基础 CURD 的 XML 实现</h3><h5 id="Maven-XML-dependencies-配置"><a href="#Maven-XML-dependencies-配置" class="headerlink" title="Maven XML dependencies 配置"></a>Maven XML dependencies 配置</h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="SqlMapConfig-xml"><a href="#SqlMapConfig-xml" class="headerlink" title="SqlMapConfig.xml"></a>SqlMapConfig.xml</h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatisdb&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;***&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;***&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mybatis\dao\IUserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="IUserMapper-xml-（这是我自己写的项目中的-IUserMapper-的配置）"><a href="#IUserMapper-xml-（这是我自己写的项目中的-IUserMapper-的配置）" class="headerlink" title="IUserMapper.xml （这是我自己写的项目中的 IUserMapper 的配置）"></a>IUserMapper.xml （这是我自己写的项目中的 IUserMapper 的配置）</h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;mybatis.dao.IUserDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;mybatis.entity.User&quot;</span>&gt;</span><br>        select * from User<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;mybatis.entity.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Integer&quot;</span>&gt;</span><br>        select * from User where id=#&#123;uid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;removeById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Integer&quot;</span>&gt;</span><br>        delete from User where id=#&#123;uid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;mybatis.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;AFTER&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Integer&quot;</span>&gt;</span><br>            select last_insert_id()<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br>        insert into User(username, address, sex, birthday) values (#&#123;username&#125;, #&#123;address&#125;, #&#123;sex&#125;, #&#123;birthday&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;mybatis.entity.User&quot;</span>&gt;</span><br>        update user set username=#&#123;username&#125;, birthday=#&#123;birthday&#125;, address=#&#123;address&#125;, sex=#&#123;sex&#125; where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByIdQueryVo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;mybatis.entity.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Integer&quot;</span>&gt;</span><br>        select * from User where id=#&#123;user.uid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="Dao-类实现（同样也是例子）"><a href="#Dao-类实现（同样也是例子）" class="headerlink" title="Dao 类实现（同样也是例子）"></a>Dao 类实现（同样也是例子）</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">User <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeById</span><span class="hljs-params">(Integer id)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateById</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-function">User <span class="hljs-title">findByIdQueryVo</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="二、-延时加载-（懒加载）"><a href="#二、-延时加载-（懒加载）" class="headerlink" title="二、 延时加载 （懒加载）"></a>二、 延时加载 （懒加载）</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 懒加载部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">assoociation</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;bill&quot;</span> <span class="hljs-attr">colume</span>=<span class="hljs-string">&quot;bid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;bill&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;*.findById&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>select * from user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;bill&quot;</span>&gt;</span><br>select * from bills where id = #&#123;bid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>同时还需要开启延迟加载的开关</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 懒加载开启 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 按需加载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="三、-缓存"><a href="#三、-缓存" class="headerlink" title="三、 缓存"></a>三、 缓存</h3><p>减小和数据库的交互次数，提升效率。</p><p>缓存目标数据：</p><ul><li>经常查询的数据</li><li>不经常改变的数据</li><li>数据的正确与否对最终结果影响不大<ul><li>例如银行数据之类的，股市数据之类的都不能用缓存，查询之间不允许有延迟，必须时刻保证数据真实性。</li></ul></li></ul><h5 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h5><ul><li><p>一级缓存</p><ul><li><p>每次执行查询之后，SqlSession 会为我们提供一块区域来进行缓存。</p></li><li><p>例如，短时间内查询两个相同的对象，那么这两个将会共享同一个内存空间。两者的 reference 相等。</p></li><li><p>当 SqlSession 对象使用 clearCache 方法清空缓存之后，将不会有一级缓存。</p></li><li><p>调用 update 方法之后它也会清空一级缓存。</p></li></ul></li><li><p>二级缓存</p><ul><li><p>指的 Mybatis 中 SqlSessionFactory 的缓存。</p></li><li><p>各种由该 SqlSessionFactory 生产的 SqlSession 都共享该缓存。</p></li><li><p>配置方式：</p><ul><li><p>Mybatis 框架支持二级缓存</p>  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>映射文件支持二级缓存</p></li><li><p>操作支持二级缓存</p>  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">useCache</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>创建新对象，但是不查询。</p></li></ul></li></ul><hr><h3 id="四、-注解开发"><a href="#四、-注解开发" class="headerlink" title="四、 注解开发"></a>四、 注解开发</h3><p><em>对于CRUD来说一共有四个注解，@Select, @Insert, @Update, @Delete</em></p><p><em>CRUD: Create, Retrieve, Update, Delete</em></p><p>注解与 xml 不能同时存在！</p><p>注解在 Dao 文件中的表现形式:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span></span>&#123;<br>    <br>    <span class="hljs-meta">@Select(&quot;select * from User where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@Results(id=&quot;userMap&quot;, </span><br><span class="hljs-meta">            value=&#123;</span><br><span class="hljs-meta">                @Result(id=true, colume=&quot;id&quot;, property=&quot;userId&quot;),</span><br><span class="hljs-meta">                @Result(colume=&quot;username&quot;, property=&quot;userName&quot;)</span><br><span class="hljs-meta">            &#125;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUser</span><span class="hljs-params">(Integer id)</span></span>;<br>    <br>    <span class="hljs-meta">@Select(&quot;select * from User&quot;)</span><br>    <span class="hljs-meta">@ResultMap(value=&#123;&quot;userMap&quot;, &#125;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAllUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h5><p>通常使用 EAGER。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IAccountDao</span></span>&#123;<br>    <br>    <span class="hljs-meta">@Select(&quot;select * from account&quot;)</span><br>    <span class="hljs-meta">@Results(id=&quot;accountMap&quot;, </span><br><span class="hljs-meta">            value=&#123;</span><br><span class="hljs-meta">                @Result(id=true, colume=&quot;id&quot;, property=&quot;Id&quot;),</span><br><span class="hljs-meta">                @Result(colume=&quot;uid&quot;, property=&quot;uid&quot;),</span><br><span class="hljs-meta">                @Result(property=&quot;user&quot;, column=&quot;uid&quot;, one=@One(select=&quot;*.IUserDao.findUser&quot;, </span><br><span class="hljs-meta">                                                                fetchType=FetchType.EAGER))</span><br><span class="hljs-meta">            &#125;)</span><br>    <span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">findAccount</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h5><p>通常使用 LAZY。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IAccountDao</span></span>&#123;<br>    <br>    <span class="hljs-meta">@Select(&quot;select * from account&quot;)</span><br>    <span class="hljs-meta">@Results(id=&quot;accountMap&quot;, </span><br><span class="hljs-meta">            value=&#123;</span><br><span class="hljs-meta">                @Result(id=true, colume=&quot;id&quot;, property=&quot;Id&quot;),</span><br><span class="hljs-meta">                @Result(colume=&quot;uid&quot;, property=&quot;uid&quot;),</span><br><span class="hljs-meta">                @Result(property=&quot;user&quot;, column=&quot;uid&quot;, many=@Many(select=&quot;*.IUserDao.findUser&quot;, </span><br><span class="hljs-meta">                                                                fetchType=FetchType.LAZY))</span><br><span class="hljs-meta">            &#125;)</span><br>    <span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">findAccount</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IAccountDao</span></span>&#123;<br>    <br>    <span class="hljs-meta">@Select(&quot;select * from account&quot;)</span><br>    <span class="hljs-meta">@Results(id=&quot;accountMap&quot;, </span><br><span class="hljs-meta">            value=&#123;</span><br><span class="hljs-meta">                @Result(id=true, colume=&quot;id&quot;, property=&quot;Id&quot;),</span><br><span class="hljs-meta">                @Result(colume=&quot;uid&quot;, property=&quot;uid&quot;),</span><br><span class="hljs-meta">                @Result(property=&quot;user&quot;, column=&quot;uid&quot;, many=@Many(select=&quot;*.IUserDao.findUser&quot;, </span><br><span class="hljs-meta">                                                                fetchType=FetchType.LAZY))</span><br><span class="hljs-meta">            &#125;)</span><br>    <span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">findAccount</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ModuleNotFoundError</title>
    <link href="/2020/04/14/ModuleNotFoundError/"/>
    <url>/2020/04/14/ModuleNotFoundError/</url>
    
    <content type="html"><![CDATA[<p>今天碰到一件十分奇怪的的事情。当我尝试着使用<a href="https://github.com/open-mmlab/mmdetection">mmdetection</a>的工具包时</p><p>我是这样输入的：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> python tools/test.py configs/faster_rcnn_r50_fpn_1x.py checkpoints/faster_rcnn_r50_fpn_1x_20181010-3d1b3351.pth modeltest</span><br></code></pre></div></td></tr></table></figure><p>而他是这样报错的：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;tools/test.py&quot;</span>, line <span class="hljs-number">13</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> tools.fuse_conv_bn <span class="hljs-keyword">import</span> fuse_module<br>ModuleNotFoundError: No module named <span class="hljs-string">&#x27;tools&#x27;</span><br></code></pre></div></td></tr></table></figure><p>我真的太郁闷了，为什么这会有错？？</p><p>明明pycharm告诉我它好得很啊！？？？</p><p><img src="/image/00860E1D.jpg" alt="img"></p><p>我拓麻真的是馹嘞勾勒</p><p>你们来品品哈，这是import行</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tools.fuse_conv_bn <span class="hljs-keyword">import</span> fuse_module<br></code></pre></div></td></tr></table></figure><hr><p>我我我经过了一晚上的冥思苦想之后终于恍然大悟，原来是因为tools没有加到运行环境里。。<del>好吧(╯▽╰)我是莎笔</del></p><p>于是。我加了一句</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;E:\\code\\python_code\\mmdetection&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>神奇地搞定了哈哈哈！！</p><p>果然遇到bug不要慌，先冷静冷静喝杯茶。</p><p><img src="/image/00C7EB23.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「解决」anaconda下cl.exe缺失的报错</title>
    <link href="/2020/04/14/lack-of-cl-exe/"/>
    <url>/2020/04/14/lack-of-cl-exe/</url>
    
    <content type="html"><![CDATA[<p>今天很崩溃，为了配置<a href="https://github.com/open-mmlab/mmdetection">mmdetection</a>所需的环境，我真可谓是煞费苦心。这里记录一个让我止步不前的报错。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD &quot;-ID:\Program Files\anaconda\envs\open_mmlab\lib\site-packages\numpy\core\include&quot; &quot;-ID:\Program Files\anaconda\envs\open_mmlab\include&quot; &quot;-ID:\Program Files\anaconda\envs\open_mmlab\include&quot; /EHsc /Tp./mmcv/video/optflow_warp/flow_warp.cpp /Fobuild\temp.win-amd64-3.7\Release\./mmcv/video/optflow_warp/flow_warp.obj<br>error: command &#x27;cl.exe&#x27; failed: No such file or directory<br></code></pre></div></td></tr></table></figure><p>奇怪了啊，为什么会报错找不到cl.exe呢？我是装了vstool的啊？？？</p><p>在网上找了一圈之后，也没有任何解答。</p><p>后来突然，当我不小心没activate就进行安装指令的时候。。。我发现。。他他他可以了？？</p><p>原来是anaconda的锅。</p><p>于是去网上就这个问题找了一会儿，发现原理其实很简单，就是anaconda环境里没有Cpython。于是：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip install cpython<br></code></pre></div></td></tr></table></figure><p>就解决了。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>anaconda</tag>
      
      <tag>visual studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupyter+Pycharm+anaconda 环境搭建时的报错</title>
    <link href="/2020/04/13/Jupyter-Pycharm-anaconda-Bug/"/>
    <url>/2020/04/13/Jupyter-Pycharm-anaconda-Bug/</url>
    
    <content type="html"><![CDATA[<p>今天突然发现，Pycharm里原来也可以集成Jupyter！</p><p>然后，本人便兴冲冲地去实现了Jupyter+Pycharm+anaconda的环境部署。。。</p><p>然而。。。事情并没有想象的那么简单。。</p><p><img src="/image/05A03442.jpg" alt="img"></p><hr><p>在成功地安装完了环境之后，本人十分愉（zi）快（xin）地点击了运行cell，以下是报错：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Traceback (most recent call last):<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\web.py&quot;, line 1703, in _execute<br>    result = await result<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\gen.py&quot;, line 742, in run<br>    yielded = self.gen.throw(*exc_info)  # type: ignore<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\notebook\services\sessions\handlers.py&quot;, line 72, in post<br>    type=mtype))<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\gen.py&quot;, line 735, in run<br>    value = future.result()<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\gen.py&quot;, line 742, in run<br>    yielded = self.gen.throw(*exc_info)  # type: ignore<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\notebook\services\sessions\sessionmanager.py&quot;, line 88, in create_session<br>    kernel_id = yield self.start_kernel_for_session(session_id, path, name, type, kernel_name)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\gen.py&quot;, line 735, in run<br>    value = future.result()<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\gen.py&quot;, line 742, in run<br>    yielded = self.gen.throw(*exc_info)  # type: ignore<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\notebook\services\sessions\sessionmanager.py&quot;, line 101, in start_kernel_for_session<br>    self.kernel_manager.start_kernel(path=kernel_path, kernel_name=kernel_name)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\gen.py&quot;, line 735, in run<br>    value = future.result()<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\tornado\gen.py&quot;, line 209, in wrapper<br>    yielded = next(result)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\notebook\services\kernels\kernelmanager.py&quot;, line 168, in start_kernel<br>    super(MappingKernelManager, self).start_kernel(**kwargs)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\jupyter_client\multikernelmanager.py&quot;, line 158, in start_kernel<br>    km.start_kernel(**kwargs)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\jupyter_client\manager.py&quot;, line 305, in start_kernel<br>    self.kernel = self._launch_kernel(kernel_cmd, **kw)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\jupyter_client\manager.py&quot;, line 212, in _launch_kernel<br>    return launch_kernel(kernel_cmd, **kw)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\site-packages\jupyter_client\launcher.py&quot;, line 135, in launch_kernel<br>    proc = Popen(cmd, **kwargs)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\subprocess.py&quot;, line 800, in __init__<br>    restore_signals, start_new_session)<br>  File &quot;D:\Program Files\anaconda\envs\torchPro\lib\subprocess.py&quot;, line 1207, in _execute_child<br>    startupinfo)<br>FileNotFoundError: [WinError 2] 系统找不到指定的文件。<br></code></pre></div></td></tr></table></figure><p>接下来 进入报错的那个文件 D:\Program Files\anaconda\envs\torchPro\lib\subprocess.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">hp, ht, pid, tid = _winapi.CreateProcess(executable, args,<br>                                         <span class="hljs-comment"># no special security</span><br>                                         <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>                                         <span class="hljs-built_in">int</span>(<span class="hljs-keyword">not</span> close_fds),<br>                                         creationflags,<br>                                         env,<br>                                         os.fspath(cwd) <span class="hljs-keyword">if</span> cwd <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                                         startupinfo)<br></code></pre></div></td></tr></table></figure><p>我确确实实地带着这串代码去网上转了好几圈，，结果还是找不出问题所在。o(╥﹏╥)o</p><p>不过最后当我切回Pycharm运行界面时，我发现</p><p><img src="/image/image-20200413194003178.png" alt="image-20200413194003178"></p><p>我之前选的是上面那个，也没搞太清楚是怎么回事，但是选了Python 3 以后就解决了。。</p><p><img src="/image/image-20200413194213258.png" alt="image-20200413194213258"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Pycharm</tag>
      
      <tag>anaconda</tag>
      
      <tag>Jupyter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习日记-卷积神经网络实现</title>
    <link href="/2020/04/08/DeepLearning-Journal/"/>
    <url>/2020/04/08/DeepLearning-Journal/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Outline-of-the-Assignment"><a href="#Outline-of-the-Assignment" class="headerlink" title="Outline of the Assignment"></a>Outline of the Assignment</h1><ul><li>Convolution functions, including:<ul><li>Zero Padding</li><li>Convolve window </li><li>Convolution forward</li></ul></li><li>Pooling functions, including:<ul><li>Pooling forward</li><li>Create mask </li><li>Distribute value</li></ul></li></ul><hr><h2 id="Convolution-function"><a href="#Convolution-function" class="headerlink" title="Convolution function"></a>Convolution function</h2><hr><h3 id="Zero-Padding"><a href="#Zero-Padding" class="headerlink" title="Zero Padding"></a>Zero Padding</h3><p>Firstly, we need to implement a function called Zero Padding, the code is as below.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">zero_pad</span>(<span class="hljs-params">X, pad</span>):</span><br>    X_pad = np.pad(X, ((<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), (pad, pad), (pad, pad), (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)), mode=<span class="hljs-string">&#x27;constant&#x27;</span>, constant_values = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">return</span> X_pad<br></code></pre></div></td></tr></table></figure><p>We can see that with using numpy, it is very easy to be implement.</p><hr><h3 id="Single-step-of-convolution"><a href="#Single-step-of-convolution" class="headerlink" title="Single step of convolution"></a>Single step of convolution</h3><p>Secondly, we need to implement the single step of convolution. </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv_single_step</span>(<span class="hljs-params">a_slice_prev, W, b</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Apply one filter defined by parameters W on a single slice (a_slice_prev) of the output activation </span><br><span class="hljs-string">    of the previous layer.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    a_slice_prev -- slice of input data of shape (f, f, n_C_prev)</span><br><span class="hljs-string">    W -- Weight parameters contained in a window - matrix of shape (f, f, n_C_prev)</span><br><span class="hljs-string">    b -- Bias parameters contained in a window - matrix of shape (1, 1, 1)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">    Z -- a scalar value, the result of convolving the sliding window (W, b) on a slice x of the input data</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Element-wise product between a_slice_prev and W. Do not add the bias yet.</span><br>    s = np.multiply(W, a_slice_prev)<br>    <span class="hljs-comment"># Sum over all entries of the volume s.</span><br>    Z = np.<span class="hljs-built_in">sum</span>(s)<br>    <span class="hljs-comment"># Add bias b to Z. Cast b to a float() so that Z results in a scalar value.</span><br>    Z = np.add(Z, <span class="hljs-built_in">float</span>(b))<br><br>    <span class="hljs-keyword">return</span> Z<br></code></pre></div></td></tr></table></figure><hr><h3 id="Convolutional-Neural-Networks-Forward-pass"><a href="#Convolutional-Neural-Networks-Forward-pass" class="headerlink" title="Convolutional Neural Networks - Forward pass"></a>Convolutional Neural Networks - Forward pass</h3><p>Then, do the forward pass part, which is using the function before to do the whole layer.</p><p>Where:</p><p>$$ n_H = \lfloor \frac{n_{H_{prev}} - f + 2 \times pad}{stride} \rfloor +1 $$<br>$$ n_W = \lfloor \frac{n_{W_{prev}} - f + 2 \times pad}{stride} \rfloor +1 $$<br>$$ n_C = \text{number of filters used in the convolution}$$</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv_forward</span>(<span class="hljs-params">A_prev, W, b, hparameters</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Implements the forward propagation for a convolution function</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    A_prev -- output activations of the previous layer, </span><br><span class="hljs-string">        numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)</span><br><span class="hljs-string">    W -- Weights, numpy array of shape (f, f, n_C_prev, n_C)</span><br><span class="hljs-string">    b -- Biases, numpy array of shape (1, 1, 1, n_C)</span><br><span class="hljs-string">    hparameters -- python dictionary containing &quot;stride&quot; and &quot;pad&quot;</span><br><span class="hljs-string">        </span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">    Z -- conv output, numpy array of shape (m, n_H, n_W, n_C)</span><br><span class="hljs-string">    cache -- cache of values needed for the conv_backward() function</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    <span class="hljs-comment"># Retrieve dimensions from A_prev&#x27;s shape (≈1 line)  </span><br>    (m, n_H_prev, n_W_prev, n_C_prev) = np.shape(A_prev)<br>    <br>    <span class="hljs-comment"># Retrieve dimensions from W&#x27;s shape (≈1 line)</span><br>    (f, f, n_C_prev, n_C) = np.shape(W)<br>    <br>    <span class="hljs-comment"># Retrieve information from &quot;hparameters&quot; (≈2 lines)</span><br>    stride = hparameters[<span class="hljs-string">&#x27;stride&#x27;</span>]<br>    pad = hparameters[<span class="hljs-string">&#x27;pad&#x27;</span>]<br>    <br>    <span class="hljs-comment"># Compute the dimensions of the CONV output volume using the formula given above. </span><br>    <span class="hljs-comment"># Hint: use int() to apply the &#x27;floor&#x27; operation. (≈2 lines)</span><br>    n_H = <span class="hljs-built_in">int</span>((n_H_prev - f + <span class="hljs-number">2</span> * pad)/stride) + <span class="hljs-number">1</span><br>    n_W = <span class="hljs-built_in">int</span>((n_W_prev - f + <span class="hljs-number">2</span> * pad)/stride) + <span class="hljs-number">1</span><br>    <br>    <span class="hljs-comment"># Initialize the output volume Z with zeros. (≈1 line)</span><br>    Z = np.zeros((m, n_H, n_W, n_C))<br>    <br>    <span class="hljs-comment"># Create A_prev_pad by padding A_prev</span><br>    A_prev_pad = zero_pad(X=A_prev, pad=pad)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):               <span class="hljs-comment"># loop over the batch of training examples</span><br>        a_prev_pad = np.squeeze(A_prev_pad[i, :, :, :])               <span class="hljs-comment"># Select ith training example&#x27;s padded activation</span><br>        <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_H):           <span class="hljs-comment"># loop over vertical axis of the output volume</span><br>            <span class="hljs-comment"># Find the vertical start and end of the current &quot;slice&quot; (≈2 lines)</span><br>            vert_start = h * stride<br>            vert_end = h * stride + f<br>            <br>            <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_W):       <span class="hljs-comment"># loop over horizontal axis of the output volume</span><br>                <span class="hljs-comment"># Find the horizontal start and end of the current &quot;slice&quot; (≈2 lines)</span><br>                horiz_start = w * stride<br>                horiz_end = w * stride + f<br>                <br>                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_C):   <span class="hljs-comment"># loop over channels (= #filters) of the output volume</span><br>                                        <br>                    <span class="hljs-comment"># Use the corners to define the (3D) slice of a_prev_pad (See Hint above the cell). (≈1 line)</span><br>                    a_slice_prev = a_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :]<br>                    <br>                    <span class="hljs-comment"># Convolve the (3D) slice with the correct filter W and bias b, to get back one output neuron. (≈3 line)</span><br>                    weights = W[: ,: , :, c]<br>                    biases = b[:, :, :, c]<br>                    Z[i, h, w, c] = conv_single_step(a_slice_prev=a_slice_prev, b=biases, W=weights)<br>                                  <br>    <br>    <span class="hljs-comment"># Making sure your output shape is correct</span><br>    <span class="hljs-keyword">assert</span>(Z.shape == (m, n_H, n_W, n_C))<br>    <br>    <span class="hljs-comment"># Save information in &quot;cache&quot; for the backprop</span><br>    cache = (A_prev, W, b, hparameters)<br>    <br>    <span class="hljs-keyword">return</span> Z, cache<br></code></pre></div></td></tr></table></figure><p>DON’T FORGET TO MULTIPLY STRIDE!!!</p><hr><h3 id="Pooling-Layer"><a href="#Pooling-Layer" class="headerlink" title="Pooling Layer"></a>Pooling Layer</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pool_forward</span>(<span class="hljs-params">A_prev, hparameters, mode = <span class="hljs-string">&quot;max&quot;</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Implements the forward pass of the pooling layer</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    A_prev -- Input data, numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)</span><br><span class="hljs-string">    hparameters -- python dictionary containing &quot;f&quot; and &quot;stride&quot;</span><br><span class="hljs-string">    mode -- the pooling mode you would like to use, defined as a string (&quot;max&quot; or &quot;average&quot;)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">    A -- output of the pool layer, a numpy array of shape (m, n_H, n_W, n_C)</span><br><span class="hljs-string">    cache -- cache used in the backward pass of the pooling layer, contains the input and hparameters </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    <span class="hljs-comment"># Retrieve dimensions from the input shape</span><br>    (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape<br>    <br>    <span class="hljs-comment"># Retrieve hyperparameters from &quot;hparameters&quot;</span><br>    f = hparameters[<span class="hljs-string">&quot;f&quot;</span>]<br>    stride = hparameters[<span class="hljs-string">&quot;stride&quot;</span>]<br>    <br>    <span class="hljs-comment"># Define the dimensions of the output</span><br>    n_H = <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span> + (n_H_prev - f) / stride)<br>    n_W = <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span> + (n_W_prev - f) / stride)<br>    n_C = n_C_prev<br>    <br>    <span class="hljs-comment"># Initialize output matrix A</span><br>    A = np.zeros((m, n_H, n_W, n_C))              <br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):                         <span class="hljs-comment"># loop over the training examples</span><br>        <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_H):                     <span class="hljs-comment"># loop on the vertical axis of the output volume</span><br>            <span class="hljs-comment"># Find the vertical start and end of the current &quot;slice&quot; (≈2 lines)</span><br>            vert_start = h * stride <br>            vert_end = h * stride + f<br>            <br>            <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_W):                 <span class="hljs-comment"># loop on the horizontal axis of the output volume</span><br>                <span class="hljs-comment"># Find the vertical start and end of the current &quot;slice&quot; (≈2 lines)</span><br>                horiz_start = w * stride<br>                horiz_end = w * stride + f<br>                <br>                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (n_C):            <span class="hljs-comment"># loop over the channels of the output volume</span><br>                    <br>                    <span class="hljs-comment"># Use the corners to define the current slice on the ith training example of A_prev, channel c. (≈1 line)</span><br>                    a_prev_slice = A_prev[i, vert_start:vert_end, horiz_start:horiz_end, c]<br>                    <br>                    <span class="hljs-comment"># Compute the pooling operation on the slice. </span><br>                    <span class="hljs-comment"># Use an if statement to differentiate the modes. </span><br>                    <span class="hljs-comment"># Use np.max and np.mean.</span><br>                    <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&quot;max&quot;</span>:<br>                        A[i, h, w, c] = np.<span class="hljs-built_in">max</span>(a_prev_slice)<br>                    <span class="hljs-keyword">elif</span> mode == <span class="hljs-string">&quot;average&quot;</span>:<br>                        A[i, h, w, c] = np.mean(a_prev_slice)<br>    <br>    <span class="hljs-comment"># Store the input and hparameters in &quot;cache&quot; for pool_backward()</span><br>    cache = (A_prev, hparameters)<br>    <br>    <span class="hljs-comment"># Making sure your output shape is correct</span><br>    <span class="hljs-keyword">assert</span>(A.shape == (m, n_H, n_W, n_C))<br>    <br>    <span class="hljs-keyword">return</span> A, cache<br></code></pre></div></td></tr></table></figure><p>The code here just like the conv_forward.</p><hr>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>DL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DL</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>房地产自动定价（三）</title>
    <link href="/2020/04/06/Housing-Evaluation-AUTO-Part-3/"/>
    <url>/2020/04/06/Housing-Evaluation-AUTO-Part-3/</url>
    
    <content type="html"><![CDATA[<p>数据的爬取和预处理都结束了。接下来，我打算利用简单的BP网络模型去对这些数据进行一个简单的拟合。这里，我用到了TensorFlow的2.1.0版本。</p><hr><h1 id="输入输出选择"><a href="#输入输出选择" class="headerlink" title="输入输出选择"></a>输入输出选择</h1><p>因为打算先跑跑BP神经网络看看效果，所以输入输出先不选的过于复杂。</p><p>INPUT: place_id, house_type, house_area, house_towards</p><p>OUTPUT: house_price</p><p>这四个输入数据分别是</p><ol><li>地区的id（我已经自行为每个地区进行了编号，例如安定门：1）</li><li>房屋的类型（我也已编了号，例如板楼：0）</li><li>房屋的面积（单位为平方米）</li><li>房屋的朝向（我也编了号，例如南：0)</li></ol><p>而输出数据为房屋的成交价格（单位万元）</p><hr><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>将数据集整理并扁平化之后，输入数据X_data变成了一个大小为（150731，310）的数据集，其中310=4+8+297+1；我采用了one_hot的编码方式将房屋的朝向、类型以及面积均变成了一个个列向量，在这之后我把他们合并到一起，其中4代表的是4种房屋类型，8代表的是8种朝向，297代表的是297种地区，这个列向量的最后一个元素是房屋的面积。</p><hr><h1 id="开始模型搭建"><a href="#开始模型搭建" class="headerlink" title="开始模型搭建"></a>开始模型搭建</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">model_build</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-comment"># shape of X_train: (120584, 310), shape of X_test: (30147, 310)</span><br>    model = tf.keras.models.Sequential([<br>        tf.keras.layers.Dense(<span class="hljs-number">64</span>, input_shape=(n,)),<br>        tf.keras.layers.Activation(<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        tf.keras.layers.Dense(<span class="hljs-number">64</span>),<br>        tf.keras.layers.Activation(<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        tf.keras.layers.Dense(<span class="hljs-number">1</span>)<br>    ])<br><br>    model.<span class="hljs-built_in">compile</span>(optimizer=Adam(learning_rate=<span class="hljs-number">0.1</span>), loss=<span class="hljs-string">&#x27;mse&#x27;</span>, metrics=[<span class="hljs-string">&#x27;mae&#x27;</span>])<br>    <span class="hljs-keyword">return</span> model<br></code></pre></div></td></tr></table></figure><p>这里采用了两层RELU去进行拟合。</p><hr><h1 id="模型的初尝试"><a href="#模型的初尝试" class="headerlink" title="模型的初尝试"></a>模型的初尝试</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scheduler</span>(<span class="hljs-params">epoch</span>):</span><br>    <span class="hljs-comment"># 每隔100个epoch，学习率减小为原来的1/3</span><br>    <span class="hljs-keyword">if</span> epoch % <span class="hljs-number">100</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> epoch != <span class="hljs-number">0</span>:<br>        lr = tf.keras.backend.get_value(model.optimizer.lr)<br>        tf.keras.backend.set_value(model.optimizer.lr, lr * <span class="hljs-number">0.3</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lr changed to &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(lr * <span class="hljs-number">0.3</span>))<br>    <span class="hljs-keyword">return</span> tf.keras.backend.get_value(model.optimizer.lr)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># print(f&quot;X&#x27;s shape: &#123;X.shape&#125;, Y&#x27;s shape: &#123;Y.shape&#125;&quot;)</span><br>    EPOCHS = <span class="hljs-number">200</span><br>    X_train, Y_train, X_test, Y_test = load_div_dataset()  <span class="hljs-comment"># load data set</span><br><br>    <span class="hljs-comment"># data normalization</span><br>    mean = X_train.mean(axis=<span class="hljs-number">0</span>)<br>    std = X_train.std(axis=<span class="hljs-number">0</span>)<br>    X_train -= mean<br>    X_train /= std<br>    X_test -= mean<br>    X_test /= std<br><br>    reduce_lr = LearningRateScheduler(scheduler)<br>    model = model_build(X_train.shape[<span class="hljs-number">1</span>])  <span class="hljs-comment"># build model</span><br>    model.summary()  <span class="hljs-comment"># print the structure of model</span><br> <br>    <span class="hljs-comment"># training begin</span><br>    history = model.fit(X_train, Y_train, epochs=EPOCHS, batch_size=<span class="hljs-number">128</span>, validation_split=<span class="hljs-number">0.2</span>,<br>                        verbose=<span class="hljs-number">2</span>, callbacks=[reduce_lr])<br>    <span class="hljs-comment"># save the model</span><br>    model.save(<span class="hljs-string">&quot;model\\model_weight.model&quot;</span>, overwrite=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># evaluate model</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train data: &quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br>    model.evaluate(X_train, Y_train, verbose=<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test data: &quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br>    model.evaluate(X_test, Y_test, verbose=<span class="hljs-number">2</span>)<br><br></code></pre></div></td></tr></table></figure><hr><h1 id="第一次结果"><a href="#第一次结果" class="headerlink" title="第一次结果"></a>第一次结果</h1><p>不得不说，看到了第一次的结果之后我是崩溃的。</p><p><img src="/image/331C896B.gif" alt="img"></p><p>为什么loss和mae这么高，我明明已经。很努力了啊！</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">train data: <span class="hljs-number">120584</span>/<span class="hljs-number">120584</span> - 7s - loss: <span class="hljs-number">105549.9276</span> - mae: <span class="hljs-number">218.9371</span><br>test data: <span class="hljs-number">30147</span>/<span class="hljs-number">30147</span> - 2s - loss: <span class="hljs-number">105881.7860</span> - mae: <span class="hljs-number">217.9669</span><br></code></pre></div></td></tr></table></figure><p>你可能对mae不太了解？？</p><p>大概就是说，对每一笔预测，都会有大概218万元的误差。。。。</p><p>那还预测个锤子啊hhh</p><hr><h1 id="一些改良"><a href="#一些改良" class="headerlink" title="一些改良"></a>一些改良</h1><p>休息了一会儿平静了一下，我发现，这个结果至少说明了我们的代码能跑，至少说明了没有过拟合O(∩_∩)O。</p><p>分析之后发现，这么离谱的结果反映的是bias偏大。那么有几个解决的措施：</p><ol><li>加训练数据</li><li>加深网络</li><li>加长训练时间</li><li>用更好的优化方法</li><li>换个神经网络结构</li></ol><p>我发现。。好像除了优化神经网络我没什么可以做的~ </p><p>于是，我回头去把网络加深了一层。。但突然意识到！诶，我用的是one_hot那么之前的那段normalization是不是有问题！</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># data normalization</span><br>mean = X_train.mean(axis=<span class="hljs-number">0</span>)<br>std = X_train.std(axis=<span class="hljs-number">0</span>)<br>X_train -= mean<br>X_train /= std<br>X_test -= mean<br>X_test /= std<br></code></pre></div></td></tr></table></figure><p>这样做法，我的std必是0啊，那肯定会出问题的！！</p><p>所以，经过深思熟虑，我把我的normalization part改成了下面这样：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># data normalization</span><br>mean_area = X_train[:, -<span class="hljs-number">1</span>].mean(axis=<span class="hljs-number">0</span>)<br>std_area = X_train[:, -<span class="hljs-number">1</span>].std(axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;X_train_area_data: <span class="hljs-subst">&#123;X_train[:, -<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br>X_train[:, -<span class="hljs-number">1</span>] -= mean_area<br>X_train[:, -<span class="hljs-number">1</span>] /= std_area<br>X_test[:, -<span class="hljs-number">1</span>] -= mean_area<br>X_test[:, -<span class="hljs-number">1</span>] /= std_area<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;After normalization: X_train_area_data: <span class="hljs-subst">&#123;X_train[:, -<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br><br></code></pre></div></td></tr></table></figure><p>这么改完之后，我又顺便把我的网络加深了一层：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">model = tf.keras.models.Sequential([<br>    tf.keras.layers.Dense(<span class="hljs-number">128</span>, input_shape=(n,)),<br>    tf.keras.layers.Activation(<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.Dense(<span class="hljs-number">128</span>),<br>    tf.keras.layers.Activation(<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.Dense(<span class="hljs-number">128</span>),<br>    tf.keras.layers.Activation(<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.Dense(<span class="hljs-number">1</span>)<br>])<br></code></pre></div></td></tr></table></figure><p>果不其然，这么一改之后，在epoch=200的时候mae就下降到了100左右：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">train data: <span class="hljs-number">120584</span>/<span class="hljs-number">120584</span> - 7s - loss: <span class="hljs-number">21548.4162</span> - mae: <span class="hljs-number">102.1043</span><br>test data: <span class="hljs-number">30147</span>/<span class="hljs-number">30147</span> - 2s - loss: <span class="hljs-number">24309.7117</span> - mae: <span class="hljs-number">106.6957</span><br></code></pre></div></td></tr></table></figure><p><img src="/image/image-20200412122802652.png" alt="image-20200412122802652"></p><p><img src="/image/image-20200412122814216.png" alt="image-20200412122814216"></p><p>虽然依旧很高，但是比起之前来说好很多了呢</p><p><img src="/image/332F77F9.jpg" alt="img"></p><p>今天暂时先这样吧，先睡一觉，想想是不是能有什么好方法ε=(´ο｀*)))唉</p><hr><p>git仓库链接：<a href="https://github.com/AIINIRII/HousingEvaluation/">https://github.com/AIINIRII/HousingEvaluation/</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>ML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>ML</tag>
      
      <tag>数据挖掘</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>房地产自动定价（二）</title>
    <link href="/2020/04/05/Housing-Evaluation-AUTO-Part-2/"/>
    <url>/2020/04/05/Housing-Evaluation-AUTO-Part-2/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>昨天，我确实爬到了我所需要的数据集，但是为了让后期的机器学习算法运行地更为顺利，我觉得非常有必要做一期数据预处理。在进行数据预处理之前，我想先给大家看一下我的数据库结构。</p><p><img src="/image/image-20200405215248645.png" alt="image-20200405215248645"></p><p><img src="/image/image-20200405215310864.png" alt="image-20200405215310864"></p><p>虽说只是草草一撇，但是我们可以发现其中有很多数据格式都不够统一，其中甚至有些显示的是暂无数据。</p><p>不妨来一列列地统一化吧~ヽ(￣▽￣)ノ</p><hr><h2 id="house-title"><a href="#house-title" class="headerlink" title="house_title"></a>house_title</h2><p>这列很明显的我们可以看到后面的 “**平米” 的数据和之后的house_area产生了数据重复，我们需要做的是将 “**平米” 数据给剔除。</p><p>因为涉及到字符串切片，我们的流程就只好放在python中了（而非MySQL）。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">house_title_format</span>(<span class="hljs-params">self</span>):</span><br>    cousor_r = self.db.cursor()<br>    cousor_w = self.db.cursor()<br>    sqlR = <span class="hljs-string">&quot;SELECT house_id, house_title FROM house_info;&quot;</span><br>    sqlW = <span class="hljs-string">&quot;UPDATE house_info SET house_title = %s, rooms_type = %s WHERE house_id = %s;&quot;</span><br>    cousor_r.execute(sqlR)<br>    result_set = cousor_r.fetchall()<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> result_set:<br>        house_id = row[<span class="hljs-number">0</span>]<br>        house_title = row[<span class="hljs-number">1</span>]<br>        title = house_title.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">0</span>]<br>        rooms = house_title.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>]<br>        cousor_w.execute(sqlW, (title, rooms, <span class="hljs-built_in">str</span>(house_id)))<br>    self.db.commit()<br></code></pre></div></td></tr></table></figure><p><img src="/image/1929C022.jpg" alt="img"></p><p>事实上我好像忘了测试就跑原数据集了。还好苍天有眼，没毁了数据。既然想起来了，赶紧先备个份嘻嘻。</p><hr><h2 id="house-towards"><a href="#house-towards" class="headerlink" title="house towards"></a>house towards</h2><p>好了我回来了，刚刚真是惊心动魄，这下我存好数据库了，实在不行就删库重来呗!</p><p><img src="/image/19311CA8.jpg" alt="img"></p><p><strong>house floor</strong>先不处理，那个太难了。先把<strong>house towards</strong>这列处理下。</p><p>对<strong>house towards</strong>这列做了去重查询之后，发现它们的数据格式大同小异，都是 “ 南 北 东 “ 类似如此的格式（即*方向+空格+方向+…*）除此之外还有一些”暂无数据”的小可爱。那其实就很简单啦。</p><p>在经过了一番操作之后，我成功地按照{‘南’: 0, ‘北’: 1, ‘东’: 2, ‘西’: 3, ‘西南’: 4, ‘东南’: 5, ‘东北’: 6, ‘西北’: 7}的方式把数据转化成功了。</p><p>下一个是谁，我来看看(oﾟ▽ﾟ)o</p><hr><h2 id="house-type"><a href="#house-type" class="headerlink" title="house_type"></a>house_type</h2><p>因为乍一看其实house_type和house_towards的处理差不多，好啦，那就先处理它。</p><p><img src="/image/image-20200406211723141.png" alt="image-20200406211723141"></p><p>成功了，我按照这个表格进行了转码，这下就都处理完啦。</p><hr><p><img src="/image/198DB3D7.jpg" alt="img"></p><p>那么数据预处理就结束了，接下来，为了让数据更加充足，我想做一下每个地点的经纬度的抓取~希望能成功啊！</p><hr><p>git仓库链接：<a href="https://github.com/AIINIRII/HousingEvaluation/">https://github.com/AIINIRII/HousingEvaluation/</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>ML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>ML</tag>
      
      <tag>数据挖掘</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>房地产自动定价（一）</title>
    <link href="/2020/04/04/Housing-Evaluation-AUTO-Part-1/"/>
    <url>/2020/04/04/Housing-Evaluation-AUTO-Part-1/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="一切的开始"><a href="#一切的开始" class="headerlink" title="一切的开始"></a>一切的开始</h1><p>这房地产自动定价呢，其实是个项目。而这个项目的故事则说来话长了。记得大概是去年5月接了这个项目，后来浑浑噩噩地做了一段时间，最后似乎是因为技术上不过关就放弃了治疗（十分不提倡这种学术精神！）。</p><p>但这件事情可没有这么简单。。。</p><p>很快，大概六月份我们就要结题了。</p><p><img src="/image/0D1B609F.jpg" alt="img"></p><p>相比于混过最后这段日子，我觉得，还是冲一冲吧！</p><p>这个系列博文将会记录我冲击路上所将经历的坎坷。</p><hr><h1 id="爬虫部分"><a href="#爬虫部分" class="headerlink" title="爬虫部分"></a>爬虫部分</h1><p>在数据挖掘之前肯定需要做一个数据集，不同于以往，这次我打算用scrapy框架来爬取房地产网站的有关数据。</p><p>首先，我们来用scrapy来自动生成一个基础框架：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">(HousingEvaluation) E:\code\python_code\HousingEvaluation&gt;scrapy startproject HousingDataScrawler<br>Fatal error <span class="hljs-keyword">in</span> launcher: Unable to create <span class="hljs-keyword">process</span> <span class="hljs-keyword">using</span> <span class="hljs-string">&#x27;&quot;d:\bld\scrapy_1584555977003\_h_env\python.exe&quot;  &quot;D:\Program Files\anaconda\envs\HousingEvaluation\Scripts</span><br><span class="hljs-string">\scrapy.exe&quot; startproject HousingDataScrawler&#x27;</span>: ???????????<br><br></code></pre></div></td></tr></table></figure><p>哎呀！报错了！在网上查了一圈之后发现原来使需要用以下命令来执行，感觉错的好冤枉！o(╥﹏╥)o：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">python <span class="hljs-literal">-m</span> scrapy startproject xxx<br></code></pre></div></td></tr></table></figure><p><img src="/image/image-20200404130926056.png" alt="image-20200404130926056"></p><p>这里可以看一下生成之后的程序结构。</p><p>然后我们选好我们希望爬取房源信息的网站。这里选的是<a href="https://bj.lianjia.com/">链家</a>。</p><table><thead><tr><th>房屋户型</th><th>所在楼层</th><th>建筑面积</th><th>户型结构</th><th>套内面积</th><th>建筑类型</th><th>房屋朝向</th></tr></thead><tbody><tr><td>2室1厅1厨1卫</td><td>中楼层(共4层)</td><td>54.14㎡</td><td>平层</td><td>37.7㎡</td><td>板楼</td><td>南 北</td></tr></tbody></table><table><thead><tr><th>建成年代</th><th>装修情况</th><th>建筑结构</th><th>供暖方式</th><th>梯户比例</th><th>产权年限</th><th>配备电梯</th></tr></thead><tbody><tr><td>1990</td><td>精装</td><td>混合结构</td><td>集中供暖</td><td>一梯两户</td><td>70年</td><td>无</td></tr></tbody></table><p>之后我们点开网站，发现每个房源都会有这么一系列的信息，而这些信息中大部分都是有用的。这里我们选取**房屋户型(house_type)、所在楼层(house_floor)、套内面积(house_area)、建筑类型(house_type)、房屋朝向(house_towards)、建成年代(completion_time)、装修情况(house_finish)、梯户比例(elevator_ratio)、配备电梯(have_elevator)<strong>以及页面上的</strong>房屋标题(house_title)、房屋价格(house_price)、交易时间(trading_date)**进行爬取。</p><p>以下是HouseDataItem的构成。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDataItem</span>(<span class="hljs-params">scrapy.Item</span>):</span><br>    house_title = scrapy.Field()<br>    house_floor = scrapy.Field()<br>    house_price = scrapy.Field()<br>    house_type = scrapy.Field()<br>    house_finish = scrapy.Field()<br>    house_area = scrapy.Field()<br>    house_towards = scrapy.Field()<br>    have_elevator = scrapy.Field()<br>    elevator_ratio = scrapy.Field()<br>    completion_time = scrapy.Field()<br>    trading_date = scrapy.Field()<br><br></code></pre></div></td></tr></table></figure><p>接下来就是痛苦的解析环节了，因为要解析的东西实在太多，就不做解释了，直接上代码。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span><br>    houseDataItem = HouseDataItem()<br>    houseDataItem[<span class="hljs-string">&#x27;house_title&#x27;</span>] = response.xpath(<span class="hljs-string">&#x27;/html/body/div[4]/div/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>    houseDataItem[<span class="hljs-string">&#x27;house_price&#x27;</span>] = \<br>    response.xpath(<span class="hljs-string">&#x27;/html/body/section[1]/div[2]/div[2]/div[1]/span/i/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>] + \<br>    response.xpath(<span class="hljs-string">&#x27;/html/body/section[1]/div[2]/div[2]/div[1]/span/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>    date_in_text = response.xpath(<span class="hljs-string">&#x27;/html/body/div[4]/div/span/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>    <span class="hljs-keyword">if</span> date_in_text.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;成交&quot;</span>:<br>        houseDataItem[<span class="hljs-string">&#x27;trading_date&#x27;</span>] = date_in_text.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;house_floor&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[2]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;house_type&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[6]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;house_finish&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[8]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;house_area&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[3]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;house_towards&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[7]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;have_elevator&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[14]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;elevator_ratio&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[12]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        houseDataItem[<span class="hljs-string">&#x27;completion_time&#x27;</span>] = \<br>        response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;introduction&quot;]/div[1]/div[1]/div[2]/ul/li[8]/text()&#x27;</span>).extract()[<span class="hljs-number">0</span>].strip()<br>        <span class="hljs-keyword">yield</span> houseDataItem<br><br></code></pre></div></td></tr></table></figure><p>啊哈，总算搞定啦！这样之前准备好的160000条链接就可以被逐个爬取啦！！！</p><p><img src="/image/image-20200404232022048.png" alt="image-20200404232022048"></p><p>速度还是很快的，估计十二点左右就可以全整到数据库里啦！是异常开心了O(∩_∩)O哈哈~</p><p>那么，今天就这样啦，明天准备把这爬到的原始数据格式化了~~ 希望能坚持下去啊！</p><hr><p>git仓库链接：<a href="https://github.com/AIINIRII/HousingEvaluation/">https://github.com/AIINIRII/HousingEvaluation/</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>ML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>ML</tag>
      
      <tag>数据挖掘</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的先序遍历、中序遍历以及后序遍历</title>
    <link href="/2020/04/02/preorder-inorder-and-postorder/"/>
    <url>/2020/04/02/preorder-inorder-and-postorder/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="开始前的一些碎碎念"><a href="#开始前的一些碎碎念" class="headerlink" title="开始前的一些碎碎念"></a>开始前的一些碎碎念</h2><p>仔细算算，距离我搭建好这个博客已经有进一个月了。</p><p>但。。。。？</p><p>为什么我还是一篇博文也写不出来！？</p><p>明明我也是有个博主梦的好嘛？</p><p><img src="/image/02D461D5.png" alt="img"></p><p>果然这样下去还是不行的，要不用技术贴来水水博客好了。</p><p><img src="/image/02D705CC.jpg" alt="img"></p><p>说干就干！正好最近在学习二叉树，这次就来聊聊自己对先序遍历 (pre-order) 、中序遍历 (in-order) 和后序遍历 (post-order) 的理解吧！</p><hr><h2 id="二叉树的结构"><a href="#二叉树的结构" class="headerlink" title="二叉树的结构"></a>二叉树的结构</h2><p>若要谈三种遍历方式，必定逃不过二叉树本身。先放上二叉树的解释。</p><blockquote><p>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</p><p>一棵深度为k，且有2^k-1个结点的二叉树，称为满二叉树。这种树的特点是每一层上的结点数都是最大结点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且或者最后一层是满的，或者是在右边缺少连续若干结点，则此二叉树为完全二叉树。具有n个结点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子结点，至多有2k-1个结点。</p><p>来源：<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91">百度百科</a></p></blockquote><p>我们可以看到，二叉树确实非常非常有用(￣▽￣)~*，而二叉树的结构其实也就是：</p><ul><li>每个节点最多只能有两个子节点</li><li>整棵树从根节点（root node）出发，到无元素存储的外部节点（external node）结束。</li></ul><hr><h2 id="先序（pre-order）、中序（in-order）和后序（post-order）"><a href="#先序（pre-order）、中序（in-order）和后序（post-order）" class="headerlink" title="先序（pre-order）、中序（in-order）和后序（post-order）"></a>先序（pre-order）、中序（in-order）和后序（post-order）</h2><h4 id="一、先序（pre-order）"><a href="#一、先序（pre-order）" class="headerlink" title="一、先序（pre-order）"></a>一、先序（pre-order）</h4><p>那么，介绍完二叉树的结构之后问题就来了，什么是先序遍历呢？</p><p>当我们去搜索一棵二叉树上所有元素的时候，我们难免需要遵守一种规律。而先序遍历的规则是这样的：</p><ol><li><p>首先，我们会去问候根节点，这个时候我们就可以对这个节点干些想干的事情了⁄(⁄⁄•⁄ω⁄•⁄⁄)⁄</p></li><li><p>之后呢，我们会按顺序干以下两件事</p><p>a)  问候这个节点的左子节点，并将该节点当成新的根节点，重复步骤1 - 2直到没有新节点可以被访问</p><p>b)  问候这个节点的右子节点，并将该节点当成新的根节点，重复步骤1 - 2直到没有新节点可以被访问</p></li></ol><p>我们可以很明显地看到，这个其实是一个递归过程，而代码是这样的：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryNodePreorder</span><span class="hljs-params">(ITree tree, IPosition nowRoot)</span> </span>&#123;<br>    <span class="hljs-comment">/* 这里可以对nowRoot节点干些事情 */</span><br>    <span class="hljs-keyword">if</span> (tree.isLeaf(nowRoot)) &#123; <span class="hljs-comment">// 如果nowRoot是叶节点退出递归</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 按顺序去访问nowRoot的左右子节点</span><br>        queryNodePreorder(tree, tree.getLeftChild(nowRoot)); <br>        queryNodePreorder(tree, tree.getRightChild(nowRoot));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="二、中序（In-order）"><a href="#二、中序（In-order）" class="headerlink" title="二、中序（In-order）"></a>二、中序（In-order）</h4><p>其实中序遍历和先序遍历相差无几。下面先给出中序遍历的规则：</p><ol><li><p>首先，还是要找到根节点，但是不同于先序，我们暂时先不访问它</p></li><li><p>之后呢，不同于先序，我们会按顺序干以下四件事</p><p>a)  找到这个节点的左子节点（先不访问），并将该节点当成新的根节点，重复步骤1 - 2直到找到最左的那个子节点</p><p>b)  然后从这个新的节点开始访问，访问完之后访问它的父节点</p><p>c)  父节点之后是父节点的右子节点，同样也是不访问，只是找到它</p><p>d)  再对这个右子节点重复步骤a - c，直到将整棵树操作完</p></li></ol><p>用文字说明有点绕了，还是放上代码吧</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryNodeInorder</span><span class="hljs-params">(ITree tree, IPosition nowRoot)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tree.isLeaf(nowRoot)) &#123; <span class="hljs-comment">// 如果nowRoot是叶节点退出递归</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 按顺序去访问nowRoot的左右子节点</span><br>        queryNodeInorder(tree, tree.getLeftChild(nowRoot)); <br>        <span class="hljs-comment">/* 不同于先序，我们会在这里对nowRoot节点干事情 */</span><br>        queryNodeInorder(tree, tree.getRightChild(nowRoot));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="三、后序（post-order）"><a href="#三、后序（post-order）" class="headerlink" title="三、后序（post-order）"></a>三、后序（post-order）</h4><p>说实话，我现在还不太清楚后序为什么叫（post-order）。。但原理还是很清晰的：</p><ol><li><p>首先，还是要找到根节点，但是不同于先序，我们暂时先不访问它</p></li><li><p>然后我们会按顺序干下面几件事：</p><p>a)  找到左子节点，不访问</p><p>b)  找到该节点的左子节点，并重复此步骤，直到找到叶节点</p><p>c)  访问该叶节点</p><p>d)  访问该叶节点的父节点的右子节点</p><p>e)  将该右子节点当成新的根节点重复操作a - d</p><p>f )  访问完右子节点后访问根节点</p></li></ol><p>(；´д｀)ゞ这文字写得我都恶心了。。。</p><p>还是放上代码吧，简单易懂：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryNodePostorder</span><span class="hljs-params">(ITree tree, IPosition nowRoot)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tree.isLeaf(nowRoot)) &#123; <span class="hljs-comment">// 如果nowRoot是叶节点退出递归</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 按顺序去访问nowRoot的左右子节点</span><br>        queryNodePostorder(tree, tree.getLeftChild(nowRoot)); <br>        queryNodePostorder(tree, tree.getRightChild(nowRoot));<br>        <span class="hljs-comment">/* 在这里对nowRoot节点进行访问 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇博文大概就是这样啦，先序、中序和后序，再也不会傻傻分不清楚了ヽ(￣▽￣)ﾉ</p><p>下篇博文打算聊聊如何用先序、中序和后序的组合看出原来的二叉树结构，希望自己能坚持下去呀！~</p><p>٩꒰▽ ꒱۶⁼³₌₃ 学习去咯</p>]]></content>
    
    
    <categories>
      
      <category>DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
